.segment "BANK_31"
START:
	LDA #%00001000
	STA PPUCTRL
	CLD
	SEI
; Disable SRAM
	LDA #%01000000
	STA PRG_RAM_PROTECT
; Reset the Stack
	LDX #$FF
	TXS
; Clear the RAM
	LDA #$00
	STA $00
	STA $01
	TAY
	LDX #$08
: STA ($00),Y
	INY
	BNE @Loop1
	INC $01
	DEX
	BNE :-
	STA $01
; Clear Sprites
	JSR clear_sprites
;
	LDA #$18
	STA $0309
; Disable Screen
	LDA #%00000000
	STA PPUCTRL
	STA PPUMASK
; Wait for VBLANK
	LDX #$02
: LDA PPUSTATUS
	BPL :-
: LDA PPUSTATUS
	BMI :-
	DEX
	BNE :--
; Set basic PPU registers
	LDA #%00001000
	STA PPUCTRL
	LDA #%00011000
	STA PPUMASK
; Disable Interrupts
	LDA #%00000000
	STA SOUND_DMC
	LDA #%01000000
	STA APU_COUNTER
	STA IRQ_DISABLE
;
	LDA PPUSTATUS
	LDA #$10
	TAX
: STA PPUADDR
	STA PPUADDR
	EOR #$10
	DEX
	BNE :-
; Set to Vertical Mirroring
	LDA #$00
	STA MIRRORING
; Clear SRAM $6000-$609A
	LDA #%10000000
	STA PRG_RAM_PROTECT
	LDA #<$069B
	LDX #>$069B
	LDY #<$6000
	STY TEMP44_LO
	LDY #>$6000
	JSR clear_ram_size
	LDA #%11000000
	STA PRG_RAM_PROTECT
; Clear Nametables
	LDA #%00000000
	STA PPUMASK
	LDA #>$2000
	STA PPUADDR
	LDA #<$2000
	STA PPUADDR
	LDX #$10
	LDY #$00
: STA PPUDATA
	DEY
	BNE :-
	DEX
	BNE :-
; Enable Screen
	LDA #%00011110 ; BG Enable, Sprite Enable, No Clipping, Color Mode
	STA SOFT_PPUMASK
	LDA #%10101000 ; NMI, 8x16 Sprites, BG $0000, Sprite $1000, Increment Across, Nametable $2000
	STA SOFT_PPUCTRL
	STA PPUCTRL
	CLI
; Wait for Interrupt
	LDX #$01
	JSR wait_interrupt
;
	LDA #$00
	STA BANK_SELECT
	LDA #$18
	STA BANK_DATA
; Check for Corrupted SRAM
	LDX #$06
: LDA $66B7,X
	CMP @sram_check,X
	BNE @sram_bad
	DEX
	BPL :-
	JSR sram_checksum
	CPY $66BE
	BNE @sram_bad
	CPX $66BF
	BEQ @sram_good
@sram_bad:
; Clear SRAM $6000-$7FFE
	LDA #%10000000
	STA PRG_RAM_PROTECT
	LDA #<$1FFF
	LDX #>$1FFF
	LDY #<$6000
	STY TEMP44_LO
	LDY #>$6000
	JSR clear_ram_size
; Store Default SRAM Data
	LDX #$19 ; BANK26
	JSR bank_swap_8000
	JSR L_26_800C
	JSR L_26_8006
; Store SRAM Check
	LDA #%10000000
	STA PRG_RAM_PROTECT
	LDY #$F9
: LDA @sram_check-$F9,Y
	STA $66B7-$F9,Y
	INY
	BNE :-
	LDA #%11000000
	STA PRG_RAM_PROTECT
@sram_good:
	LDA $6403
	STA $3B
	LDA $6404
	STA $3C
	LDA $6405
	STA $3D
	LDA #$10 ; BANK17
	STA $06
	LDY #<(L_17_8000-1)
	LDA #>(L_17_8000-1)
	LDX #$02
	JSR create_thread
	JMP start_all_threads
@sram_check:
	.BYTE "AKIHIKO"

NMI:
	STA $0300
	STX $0301
	STY $0302
	BIT $2A
	BPL @Loop1
	LDA #$00
	STA $0306
	LDY $57
	LDA $58
	JSR L_C2E6
	JMP L_CB3F
@Loop1:
; Update Sprites
	LDA #$00
	STA OAMADDR
	LDA #>SPRITE
	STA OAM_DMA
;
	LDA SOFT_PPUMASK
	STA PPUMASK
	LDA PPUSTATUS
	LDA $5B
	BEQ @Loop2
	LDA #$06
	STA BANK_SELECT
	LDA #$16 ; BANK23
	STA BANK_DATA
	JSR L_23_8000
	JMP @Loop12
@Loop2:
	BIT $2B
	BPL @Loop3
	JMP @Loop12
@Loop3:
	LDA BUFFER_SIZE
	BNE @Loop4
	JMP @Loop12
@Loop4:
	BMI @Loop8
 ; Check for Buffer
	LDX #$00
@next_buffer:
	LDA BUFFER,X
	BEQ @exit_buffer
; Set VRAM Increment
	AND #%01000000
	LSR
	LSR
	LSR
	LSR
	STA PPUCTRL
; Get Buffer Length
	LDA BUFFER_LENGTH,X
	AND #%00111111
	TAY
; Set VRAM Address
	LDA BUFFER_HI,X
	STA PPUADDR
	LDA BUFFER_LO,X
	STA PPUADDR
@more_buffer:
; Store Buffer in VRAM
	LDA BUFFER_DATA,X
	STA PPUDATA
	INX
	DEY
	BNE @more_buffer
	INX
	INX
	INX
	BNE @next_buffer
@exit_buffer:
; Clear Buffer Size
	LDA #$00
	STA BUFFER_SIZE
;
	LDA #>$3F00
	STA PPUADDR
	LDA #<$3F00
	STA PPUADDR
	STA PPUADDR
	STA PPUADDR
	JMP @Loop12
@Loop8:
	BIT BUFFER_SIZE
	BVS @Loop12
	LDA BUFFER
	BEQ @Loop12
	LDA #%00001000
	STA PPUCTRL
	LDX #$00
@Loop9:
	LDY BUFFER_LENGTH,X
	BEQ @Loop11
; Set to VRAM Address
	LDA BUFFER_HI,X
	STA PPUADDR
	LDA BUFFER_LO,X
	STA PPUADDR
	LDA PPUDATA
@Loop10:
; Store VRAM Data into Buffer
	LDA PPUDATA
	STA BUFFER_DATA,X
	INX
	DEY
	BNE @Loop10
	INX
	INX
	INX
	BNE @Loop9
@Loop11:
	LDA #$C0
	STA BUFFER_SIZE
@Loop12:
	LDA SOFT_PPUCTRL
	STA PPUCTRL
	LDA #$00
	STA $0306
	LDY $57
	LDA $58
	JSR L_C2E6
	LDA $4B
	LDX #$02
	STX BANK_SELECT
	STA BANK_DATA
	INX
	LDA $4C
	STX BANK_SELECT
	STA BANK_DATA
	INX
	LDA $4D
	STX BANK_SELECT
	STA BANK_DATA
	INX
	LDA $4E
	STX BANK_SELECT
	STA BANK_DATA
	LDA $34
	STA $48
	LDA MODE_8000
	ORA #$06
	STA BANK_SELECT
	LDA #$1B ; BANK28
	STA BANK_DATA
	CLI
	JSR L_28_8000
	LDA $48
	STA $34
; Read Joypads
	LDX #$02
	LDA #$04
	STA JOYPAD_CHECK
@next_joypad:
	LDA JOYPAD1_RAW-1,X
@confirm_buttons:
	STA JOYPAD_CONFIRM
; Strobe Joypad
	LDA #$01
	STA STROBE
	LDA #$00
	STA STROBE
; Get Joypad Buttons
	LDY #$08
@next_button:
	LDA JOYPAD-1,X
	LSR
	ROL JOYPAD_DATA
	AND #$01
	ORA JOYPAD_DATA
	STA JOYPAD_DATA
	DEY
	BNE @next_button
; Check for good joypad read
	CMP JOYPAD_CONFIRM
	BEQ @good_buttons
; Check joypad again?
	DEC JOYPAD_CHECK
	BNE @confirm_buttons
	JMP @exit_buttons
@good_buttons:
; Store Joypad Press
	LDA JOYPAD1_RAW-1,X
	EOR JOYPAD_DATA
	AND JOYPAD_DATA
	STA JOYPAD1_PRESS-1,X
; Store Joypad Raw
	LDA JOYPAD_DATA
	STA JOYPAD1_RAW-1,X
@exit_buttons:
	DEX
	BNE @next_joypad
; Store Both Raw
	LDA JOYPAD1_RAW
	ORA JOYPAD2_RAW
	STA JOYPAD_RAW
; Store Both Press
	LDA JOYPAD1_PRESS
	ORA JOYPAD2_PRESS
	STA JOYPAD_PRESS
; Update Random Numbers
	JSR update_randoms
; Update Frame
	INC FRAME_COUNT
;
	LDA $06F6
	CMP #$07
	BNE @Loop19
	LDA $35
	AND #$20
	BEQ @Loop19
	BIT $35
	BMI @Loop18
	BVC @Loop19
	LDA $30
	AND #$07
	BEQ @Loop19
@Loop18:
	JMP L_CB2B
@Loop19:
	JMP L_CAEE

IRQ_BRK:
	STA $0303
	STX $0304
	STY $0305
	STA IRQ_DISABLE
	STA IRQ_ENABLE
	LDA #$00
	TAY
	JSR L_C2E6
	LDA $34
	STA BANK_SELECT
	LDY $0305
	LDX $0304
	LDA $0303
	RTI

L_C2E6:
	DEY
	AND #$01
	ASL
	STA $4A
	LDX $0306
	LDA $0308,X
	CMP #$20
	BCS @Loop1
	STY $49
	LDA SOFT_PPUCTRL
	AND #%11111100
	ORA $0308,X
	ORA $4A
	STA SOFT_PPUCTRL
	TAY
	LDA $0307,X
	STA PPUSCROLL
	LDA $49
	STA PPUSCROLL
	STY PPUCTRL
	JMP @Loop3
@Loop1:
	LSR
	LSR
	LSR
	LDA SOFT_PPUCTRL
	AND #%11111100
	ADC #$00
	STA SOFT_PPUCTRL
	LDY #$04
@Loop2:
	DEY
	BNE @Loop2
	LDA $0308,X
	STA PPUADDR
	LDA $0307,X
	STA PPUADDR
	LDA #$00
	STA PPUSCROLL
	STA PPUSCROLL
	LDA SOFT_PPUCTRL
	STA PPUCTRL
@Loop3:
	LDY #$00
	STY BANK_SELECT
	LDA $0309,X
	STA BANK_DATA
	INY
	STY BANK_SELECT
	LDA $030A,X
	STA BANK_DATA
	CPX #$0F
	BCS @Loop4
	LDA $030B,X
	BEQ @Loop4
	STA IRQ_LATCH
	STA IRQ_RELOAD
	STA IRQ_ENABLE
	LDA $0306
	CLC
	ADC #$05
	STA $0306
	RTS
@Loop4:
	STA IRQ_DISABLE
	LDA #$FF
	STA $0306
	RTS

disable_nmi:
	STA IRQ_DISABLE
	LDA SOFT_PPUCTRL
	AND #%01111111
	STA PPUCTRL
	LDA SOFT_PPUMASK
	AND #%11100111
	STA PPUMASK
	RTS

enable_nmi:
	LDA SOFT_PPUCTRL
	STA PPUCTRL
	RTS

set_draw_controls_thread:
	STA TEMPC2
	STX TEMPC3
	LDA #$17 ; BANK24
	STA $10
	LDY #<(L_24_8003-1)
	LDA #>(L_24_8003-1)
	LDX #$0C
	JSR create_thread
	RTS

do_draw_controls_thread:
; Create Draw Screen Controls Thread
	JSR set_draw_controls_thread
; Continue until thread destroyed
:  LDA #$01
	JSR switch_thread
	LDA $0C
	BNE :-
	RTS

L_C3AF:
	STA TEMPC2
	STX TEMPC3
; Store 8000 Bank and Swap
	LDA BANK_8000
	PHA
	LDX #$17 ; BANK24
	JSR bank_swap_8000
; Draw Controls
	LDA TEMPC2
	LDX TEMPC3
	JSR L_24_8000
; Return 8000 Bank
	PLA
	TAX
	JMP bank_swap_8000

L_C3C7:
	STA $C2
	LDA $2E
	PHA
	LDX #$17 ; BANK24
	JSR bank_swap_8000
	LDA $C2
	LDX #$00
	JSR L_24_8006
	PLA
	TAX
	JMP bank_swap_8000

	STA $C5
	LDA #$01
	STA $C4
L_C3E3:
	LDA #$C3
	STA $C2
	LDA #$00
	STA $C3
	LDA $2E
	PHA
	LDX #$17 ; BANK24
	JSR bank_swap_8000
	JSR L_24_8009
	PLA
	TAX
	JMP bank_swap_8000

L_C3FB:
	TAY
	LDA $2E
	PHA
	LDX #$17 ; BANK24
	JSR bank_swap_8000
	TYA
	JSR L_24_8012
	PLA
	TAX
	JMP bank_swap_8000

L_C40D:
	ORA #$80
	STA $8E
	LDA #$16 ; BANK23
	STA $1A
	LDY #<(L_23_9009-1)
	LDA #>(L_23_9009-1)
	LDX #$16
	JSR create_thread
	RTS

L_C41F:
	TAX
@Loop1:
	LDA $0700
	BEQ @Loop2
	LDA #$01
	JSR switch_thread
	JMP @Loop1
@Loop2:
	STX $0700
	RTS

L_C431:
	LDA $2E
	STA $3F
	LDX #$16 ; BANK23
	JSR bank_swap_8000
	JSR L_23_8000
	LDX $3F
	JMP bank_swap_8000

L_C442:
	TAY
	LDA $2E
	PHA
	LDX #$17 ; BANK24
	JSR bank_swap_8000
	TYA
	JSR L_24_800F
	PLA
	TAX
	JMP bank_swap_8000

bank_swap_8000_jump:
	STY TEMP44_LO
	STX TEMP44_HI
	TAX
	LDA BANK_8000
	PHA
	JSR bank_swap_8000
	LDA #>bank_swap_8000_return-1
	PHA
	LDA #<bank_swap_8000_return-1
	PHA
	JMP (TEMP)
bank_swap_8000_return:
	PLA
	TAX
	JMP bank_swap_8000

update_randoms:
	LDA RANDOM_3B
	CLC
	ADC #$83
	STA RANDOM_3B
	LDA RANDOM_3C
	ADC #$0D
	STA RANDOM_3C
	LDA RANDOM_3D
	ADC #$11
	STA RANDOM_3D
	RTS

L_C481:
	STY TEMP44_LO
	STX TEMP44_HI
	STA IRQ_DISABLE
	LDY #$00
@Loop1:
	LDX #$04
@Loop2:
	LDA (TEMP44),Y
	STA $0307,Y
	INY
	DEX
	BNE @Loop2
	CPY #$13
	BCS @Loop3
	LDA (TEMP44),Y
	STA $0307,Y
	INY
	TAX
	BNE @Loop1
@Loop3:
	RTS

	LDX $6C
	LDA $669B,X
	AND #$03
	RTS

	LDX $6D
	LDA $669B,X
	AND #$03
	RTS

store_sram_checksum:
	JSR sram_checksum
	STY $66BE
	STX $66BF
	RTS

sram_checksum:
; Clear Total
	LDA #$00
	STA TEMP44_LO
	STA TEMP44_HI
; SUM $66C0-$66FD
	LDA #<$66C0
	STA TEMP3E_LO
	LDA #>$66C0
	STA TEMP3E_HI
	LDA #<$083E
	STA TEMP40_LO
	LDA #>$083E
	STA TEMP40_HI
	JSR add_size
; SUM $7002-$7F71
	LDA #<$7002
	STA TEMP3E_LO
	LDA #>$7002
	STA TEMP3E_HI
	LDA #<$0F70
	STA TEMP40_LO
	LDA #>$0F70
	STA TEMP40_HI
	JSR add_size
; Total + $3412
	LDA TEMP44_LO
	CLC
	ADC #<$3412
	TAY
	LDA TEMP44_HI
	ADC #>$3412
	TAX
	RTS

add_size:
	LDY #$00
@more:
	LDA (TEMP3E),Y
	CLC
	ADC TEMP44_LO
	STA TEMP44_LO
	LDA #$00
	ADC TEMP45_HI
	STA TEMP45_HI
	INC TEMP3E_LO
	BNE @end
	INC TEMP3E_HI
@end:
	LDA TEMP40_LO
	SEC
	SBC #$01
	STA TEMP40_LO
	LDA TEMP40_HI
	SBC #$00
	STA TEMP40_HI
	ORA TEMP40_LO
	BNE @more
	RTS

L_C51C:
	LDY #$6D
	LDX #$20
	LDA $0399
	JSR L_D5A0
	LDY #$70
	LDX #$20
	LDA $039E
	JSR L_D5A0
	LDA $0338,X
	BNE @Loop1
	SEC
	ROR $2B
	LDA $0339,X
	STA $0338,X
	LDA #$00
	STA $0339,X
	LSR $2B
@Loop1:
	RTS

L_C546:
	JSR L_C591
	JSR L_12_9015
	JMP L_C5AE

L_C54F:
	JSR L_C591
	JSR L_12_9000
	JMP L_C5AE

L_C558:
	JSR L_C591
	JSR L_12_9003
	ROR
	STA $45
	JMP L_C5AE

L_C564:
	JSR L_C591
	JSR L_12_9006
	JMP L_C5AE

L_C56D:
	JSR L_C591
	JSR L_12_9009
	JMP L_C5AE
	JSR L_C591
	JSR L_12_900C
	JMP L_C5AE

L_C57F:
	JSR L_C591
	JSR L_12_900F
	JMP L_C5AE

L_C588:
	JSR L_C591
	JSR L_12_9012
	JMP L_C5AE

L_C591:
	STA $3F
	STX $3E
	LDA $2E
	STA $0393
	LDA $2F
	STA $0394
	LDX #$0B ; BANK12
	JSR bank_swap_8000
	LDX #$0C ; BANK13
	JSR bank_swap_A000
	LDA $3F
	LDX $3E
	RTS

L_C5AE:
	LDX $0393
	JSR bank_swap_8000
	LDX $0394
	JSR bank_swap_A000
	RTS

L_C5BB:
	LDX #$0B ; BANK12
	JSR bank_swap_8000
	LDX #$0C ; BANK13
	JSR bank_swap_A000
	RTS

L_C5C6:
	LDX #$12 ; BANK19
	JSR bank_swap_8000
	LDX #$13 ; BANK20
	JSR bank_swap_A000
	JSR L_19_8003
	JMP L_C5BB

L_C5D6:
	LDX #$10 ; BANK17
	JSR bank_swap_8000
	LDX #$11 ; BANK18
	JSR bank_swap_A000
	JSR L_17_800C
	JMP L_C5BB

L_C5E6:	JMP L_C5E6

L_C5E9:	.BYTE $00, $C0, $40, $80
L_C5ED:	.BYTE $00
	.BYTE $01
	.BYTE $01
	.BYTE $02
	.BYTE $03
	.BYTE $03
	.BYTE $04
	.BYTE $04
	.BYTE $05
	.BYTE $06
	.BYTE $06
	.BYTE $07
	.BYTE $08
	.BYTE $08
	.BYTE $09
	.BYTE $0A
	.BYTE $0A
	.BYTE $0B
	.BYTE $0B
	.BYTE $0C
	.BYTE $0D
	.BYTE $0D
	.BYTE $0E
	.BYTE $0F
	.BYTE $0F
	.BYTE $10
	.BYTE $10
	.BYTE $11
	.BYTE $12
	.BYTE $12
	.BYTE $13
	.BYTE $14
	.BYTE $14
	.BYTE $15
	.BYTE $16
	.BYTE $16
	.BYTE $17
	.BYTE $17
	.BYTE $18
	.BYTE $19
	.BYTE $19
	.BYTE $1A
	.BYTE $1B
	.BYTE $1B
	.BYTE $1C
	.BYTE $1C
	.BYTE $1D
	.BYTE $1E
	.BYTE $1E
	.BYTE $1F
	.BYTE $1F
	.BYTE $20
	.BYTE $21
	.BYTE $21
	.BYTE $22
	.BYTE $22
	.BYTE $23
	.BYTE $24
	.BYTE $24
	.BYTE $25
	.BYTE $26
	.BYTE $26
	.BYTE $27
	.BYTE $27
	.BYTE $28
	.BYTE $29
	.BYTE $29
	.BYTE $2A
	.BYTE $2A
	.BYTE $2B
	.BYTE $2C
	.BYTE $2C
	.BYTE $2D
	.BYTE $2D
	.BYTE $2E
	.BYTE $2E
	.BYTE $2F
	.BYTE $30
	.BYTE $30
	.BYTE $31
	.BYTE $31
	.BYTE $32
	.BYTE $33
	.BYTE $33
	.BYTE $34
	.BYTE $34
	.BYTE $35
	.BYTE $35
	.BYTE $36
	.BYTE $37
	.BYTE $37
	.BYTE $38
	.BYTE $38
	.BYTE $39
	.BYTE $39
	.BYTE $3A
	.BYTE $3A
	.BYTE $3B
	.BYTE $3C
	.BYTE $3C
	.BYTE $3D
	.BYTE $3D
	.BYTE $3E
	.BYTE $3E
	.BYTE $3F
	.BYTE $3F
	.BYTE $40
	.BYTE $41
	.BYTE $41
	.BYTE $42
	.BYTE $42
	.BYTE $43
	.BYTE $43
	.BYTE $44
	.BYTE $44
	.BYTE $45
	.BYTE $45
	.BYTE $46
	.BYTE $46
	.BYTE $47
	.BYTE $47
	.BYTE $48
	.BYTE $48
	.BYTE $49
	.BYTE $4A
	.BYTE $4A
	.BYTE $4B
	.BYTE $4B
	.BYTE $4C
	.BYTE $4C
	.BYTE $4D
	.BYTE $4D
	.BYTE $4E
	.BYTE $4E
	.BYTE $4F
	.BYTE $4F
	.BYTE $50
	.BYTE $50
	.BYTE $51
	.BYTE $51
	.BYTE $52
	.BYTE $52
	.BYTE $53
	.BYTE $53
	.BYTE $54
	.BYTE $54
	.BYTE $54
	.BYTE $55
	.BYTE $55
	.BYTE $56
	.BYTE $56
	.BYTE $57
	.BYTE $57
	.BYTE $58
	.BYTE $58
	.BYTE $59
	.BYTE $59
	.BYTE $5A
	.BYTE $5A
	.BYTE $5B
	.BYTE $5B
	.BYTE $5B
	.BYTE $5C
	.BYTE $5C
	.BYTE $5D
	.BYTE $5D
	.BYTE $5E
	.BYTE $5E
	.BYTE $5F
	.BYTE $5F
	.BYTE $60
	.BYTE $60
	.BYTE $60
	.BYTE $61
	.BYTE $61
	.BYTE $62
	.BYTE $62
	.BYTE $63
	.BYTE $63
	.BYTE $63
	.BYTE $64
	.BYTE $64
	.BYTE $65
	.BYTE $65
	.BYTE $66
	.BYTE $66
	.BYTE $66
	.BYTE $67
	.BYTE $67
	.BYTE $68
	.BYTE $68
	.BYTE $68
	.BYTE $69
	.BYTE $69
	.BYTE $6A
	.BYTE $6A
	.BYTE $6A
	.BYTE $6B
	.BYTE $6B
	.BYTE $6C
	.BYTE $6C
	.BYTE $6C
	.BYTE $6D
	.BYTE $6D
	.BYTE $6E
	.BYTE $6E
	.BYTE $6E
	.BYTE $6F
	.BYTE $6F
	.BYTE $70
	.BYTE $70
	.BYTE $70
	.BYTE $71
	.BYTE $71
	.BYTE $71
	.BYTE $72
	.BYTE $72
	.BYTE $73
	.BYTE $73
	.BYTE $73
	.BYTE $74
	.BYTE $74
	.BYTE $74
	.BYTE $75
	.BYTE $75
	.BYTE $76
	.BYTE $76
	.BYTE $76
	.BYTE $77
	.BYTE $77
	.BYTE $77
	.BYTE $78
	.BYTE $78
	.BYTE $78
	.BYTE $79
	.BYTE $79
	.BYTE $79
	.BYTE $7A
	.BYTE $7A
	.BYTE $7A
	.BYTE $7B
	.BYTE $7B
	.BYTE $7B
	.BYTE $7C
	.BYTE $7C
	.BYTE $7C
	.BYTE $7D
	.BYTE $7D
	.BYTE $7D
	.BYTE $7E
	.BYTE $7E
	.BYTE $7E
	.BYTE $7F
	.BYTE $7F
	.BYTE $7F
	.BYTE $80
L_C6ED:	.BYTE $80
	.BYTE $00
	.BYTE $00
	.BYTE $0D
	.BYTE $00
	.BYTE $19
	.BYTE $00
	.BYTE $26
	.BYTE $00
	.BYTE $32
	.BYTE $00
	.BYTE $3F
	.BYTE $00
	.BYTE $4B
	.BYTE $00
	.BYTE $58
	.BYTE $00
	.BYTE $64
	.BYTE $00
	.BYTE $71
	.BYTE $00
	.BYTE $7E
	.BYTE $00
	.BYTE $8A
	.BYTE $00
	.BYTE $97
	.BYTE $00
	.BYTE $A3
	.BYTE $00
	.BYTE $B0
	.BYTE $00
	.BYTE $BC
	.BYTE $00
	.BYTE $C9
	.BYTE $00
	.BYTE $D5
	.BYTE $00
	.BYTE $E2
	.BYTE $00
	.BYTE $EE
	.BYTE $00
	.BYTE $FB
	.BYTE $00
	.BYTE $07
	.BYTE $01
	.BYTE $14
	.BYTE $01
	.BYTE $20
	.BYTE $01
	.BYTE $2D
	.BYTE $01
	.BYTE $39
	.BYTE $01
	.BYTE $45
	.BYTE $01
	.BYTE $52
	.BYTE $01
	.BYTE $5E
	.BYTE $01
	.BYTE $6B
	.BYTE $01
	.BYTE $77
	.BYTE $01
	.BYTE $83
	.BYTE $01
	.BYTE $90
	.BYTE $01
	.BYTE $9C
	.BYTE $01
	.BYTE $A8
	.BYTE $01
	.BYTE $B4
	.BYTE $01
	.BYTE $C1
	.BYTE $01
	.BYTE $CD
	.BYTE $01
	.BYTE $D9
	.BYTE $01
	.BYTE $E5
	.BYTE $01
	.BYTE $F2
	.BYTE $01
	.BYTE $FE
	.BYTE $01
	.BYTE $0A
	.BYTE $02
	.BYTE $16
	.BYTE $02
	.BYTE $22
	.BYTE $02
	.BYTE $2E
	.BYTE $02
	.BYTE $3A
	.BYTE $02
	.BYTE $46
	.BYTE $02
	.BYTE $53
	.BYTE $02
	.BYTE $5F
	.BYTE $02
	.BYTE $6B
	.BYTE $02
	.BYTE $76
	.BYTE $02
	.BYTE $82
	.BYTE $02
	.BYTE $8E
	.BYTE $02
	.BYTE $9A
	.BYTE $02
	.BYTE $A6
	.BYTE $02
	.BYTE $B2
	.BYTE $02
	.BYTE $BE
	.BYTE $02
	.BYTE $CA
	.BYTE $02
	.BYTE $D5
	.BYTE $02
	.BYTE $E1
	.BYTE $02
	.BYTE $ED
	.BYTE $02
	.BYTE $F8
	.BYTE $02
	.BYTE $04
	.BYTE $03
	.BYTE $10
	.BYTE $03
	.BYTE $1B
	.BYTE $03
	.BYTE $27
	.BYTE $03
	.BYTE $32
	.BYTE $03
	.BYTE $3E
	.BYTE $03
	.BYTE $49
	.BYTE $03
	.BYTE $55
	.BYTE $03
	.BYTE $60
	.BYTE $03
	.BYTE $6C
	.BYTE $03
	.BYTE $77
	.BYTE $03
	.BYTE $82
	.BYTE $03
	.BYTE $8E
	.BYTE $03
	.BYTE $99
	.BYTE $03
	.BYTE $A4
	.BYTE $03
	.BYTE $AF
	.BYTE $03
	.BYTE $BA
	.BYTE $03
	.BYTE $C5
	.BYTE $03
	.BYTE $D0
	.BYTE $03
	.BYTE $DC
	.BYTE $03
	.BYTE $E7
	.BYTE $03
	.BYTE $F1
	.BYTE $03
	.BYTE $FC
	.BYTE $03
	.BYTE $07
	.BYTE $04
	.BYTE $12
	.BYTE $04
	.BYTE $1D
	.BYTE $04
	.BYTE $28
	.BYTE $04
	.BYTE $32
	.BYTE $04
	.BYTE $3D
	.BYTE $04
	.BYTE $48
	.BYTE $04
	.BYTE $52
	.BYTE $04
	.BYTE $5D
	.BYTE $04
	.BYTE $67
	.BYTE $04
	.BYTE $72
	.BYTE $04
	.BYTE $7C
	.BYTE $04
	.BYTE $87
	.BYTE $04
	.BYTE $91
	.BYTE $04
	.BYTE $9B
	.BYTE $04
	.BYTE $A6
	.BYTE $04
	.BYTE $B0
	.BYTE $04
	.BYTE $BA
	.BYTE $04
	.BYTE $C4
	.BYTE $04
	.BYTE $CE
	.BYTE $04
	.BYTE $D8
	.BYTE $04
	.BYTE $E2
	.BYTE $04
	.BYTE $EC
	.BYTE $04
	.BYTE $F6
	.BYTE $04
	.BYTE $00
	.BYTE $05
	.BYTE $09
	.BYTE $05
	.BYTE $13
	.BYTE $05
	.BYTE $1D
	.BYTE $05
	.BYTE $27
	.BYTE $05
	.BYTE $30
	.BYTE $05
	.BYTE $3A
	.BYTE $05
	.BYTE $43
	.BYTE $05
	.BYTE $4D
	.BYTE $05
	.BYTE $56
	.BYTE $05
	.BYTE $5F
	.BYTE $05
	.BYTE $69
	.BYTE $05
	.BYTE $72
	.BYTE $05
	.BYTE $7B
	.BYTE $05
	.BYTE $84
	.BYTE $05
	.BYTE $8D
	.BYTE $05
	.BYTE $96
	.BYTE $05
	.BYTE $9F
	.BYTE $05
	.BYTE $A8
	.BYTE $05
	.BYTE $B1
	.BYTE $05
	.BYTE $BA
	.BYTE $05
	.BYTE $C3
	.BYTE $05
	.BYTE $CB
	.BYTE $05
	.BYTE $D4
	.BYTE $05
	.BYTE $DC
	.BYTE $05
	.BYTE $E5
	.BYTE $05
	.BYTE $ED
	.BYTE $05
	.BYTE $F6
	.BYTE $05
	.BYTE $FE
	.BYTE $05
	.BYTE $07
	.BYTE $06
	.BYTE $0F
	.BYTE $06
	.BYTE $17
	.BYTE $06
	.BYTE $1F
	.BYTE $06
	.BYTE $27
	.BYTE $06
	.BYTE $2F
	.BYTE $06
	.BYTE $37
	.BYTE $06
	.BYTE $3F
	.BYTE $06
	.BYTE $47
	.BYTE $06
	.BYTE $4F
	.BYTE $06
	.BYTE $56
	.BYTE $06
	.BYTE $5E
	.BYTE $06
	.BYTE $65
	.BYTE $06
	.BYTE $6D
	.BYTE $06
	.BYTE $74
	.BYTE $06
	.BYTE $7C
	.BYTE $06
	.BYTE $83
	.BYTE $06
	.BYTE $8A
	.BYTE $06
	.BYTE $92
	.BYTE $06
	.BYTE $99
	.BYTE $06
	.BYTE $A0
	.BYTE $06
	.BYTE $A7
	.BYTE $06
	.BYTE $AE
	.BYTE $06
	.BYTE $B5
	.BYTE $06
	.BYTE $BC
	.BYTE $06
	.BYTE $C2
	.BYTE $06
	.BYTE $C9
	.BYTE $06
	.BYTE $D0
	.BYTE $06
	.BYTE $D6
	.BYTE $06
	.BYTE $DD
	.BYTE $06
	.BYTE $E3
	.BYTE $06
	.BYTE $E9
	.BYTE $06
	.BYTE $F0
	.BYTE $06
	.BYTE $F6
	.BYTE $06
	.BYTE $FC
	.BYTE $06
	.BYTE $02
	.BYTE $07
	.BYTE $08
	.BYTE $07
	.BYTE $0E
	.BYTE $07
	.BYTE $14
	.BYTE $07
	.BYTE $1A
	.BYTE $07
	.BYTE $20
	.BYTE $07
	.BYTE $25
	.BYTE $07
	.BYTE $2B
	.BYTE $07
	.BYTE $30
	.BYTE $07
	.BYTE $36
	.BYTE $07
	.BYTE $3B
	.BYTE $07
	.BYTE $41
	.BYTE $07
	.BYTE $46
	.BYTE $07
	.BYTE $4B
	.BYTE $07
	.BYTE $50
	.BYTE $07
	.BYTE $55
	.BYTE $07
	.BYTE $5A
	.BYTE $07
	.BYTE $5F
	.BYTE $07
	.BYTE $64
	.BYTE $07
	.BYTE $69
	.BYTE $07
	.BYTE $6E
	.BYTE $07
	.BYTE $72
	.BYTE $07
	.BYTE $77
	.BYTE $07
	.BYTE $7B
	.BYTE $07
	.BYTE $80
	.BYTE $07
	.BYTE $84
	.BYTE $07
	.BYTE $88
	.BYTE $07
	.BYTE $8C
	.BYTE $07
	.BYTE $91
	.BYTE $07
	.BYTE $95
	.BYTE $07
	.BYTE $99
	.BYTE $07
	.BYTE $9D
	.BYTE $07
	.BYTE $A0
	.BYTE $07
	.BYTE $A4
	.BYTE $07
	.BYTE $A8
	.BYTE $07
	.BYTE $AB
	.BYTE $07
	.BYTE $AF
	.BYTE $07
	.BYTE $B2
	.BYTE $07
	.BYTE $B6
	.BYTE $07
	.BYTE $B9
	.BYTE $07
	.BYTE $BC
	.BYTE $07
	.BYTE $C0
	.BYTE $07
	.BYTE $C3
	.BYTE $07
	.BYTE $C6
	.BYTE $07
	.BYTE $C9
	.BYTE $07
	.BYTE $CB
	.BYTE $07
	.BYTE $CE
	.BYTE $07
	.BYTE $D1
	.BYTE $07
	.BYTE $D4
	.BYTE $07
	.BYTE $D6
	.BYTE $07
	.BYTE $D9
	.BYTE $07
	.BYTE $DB
	.BYTE $07
	.BYTE $DD
	.BYTE $07
	.BYTE $E0
	.BYTE $07
	.BYTE $E2
	.BYTE $07
	.BYTE $E4
	.BYTE $07
	.BYTE $E6
	.BYTE $07
	.BYTE $E8
	.BYTE $07
	.BYTE $EA
	.BYTE $07
	.BYTE $EC
	.BYTE $07
	.BYTE $ED
	.BYTE $07
	.BYTE $EF
	.BYTE $07
	.BYTE $F1
	.BYTE $07
	.BYTE $F2
	.BYTE $07
	.BYTE $F4
	.BYTE $07
	.BYTE $F5
	.BYTE $07
	.BYTE $F6
	.BYTE $07
	.BYTE $F7
	.BYTE $07
	.BYTE $F8
	.BYTE $07
	.BYTE $F9
	.BYTE $07
	.BYTE $FA
	.BYTE $07
	.BYTE $FB
	.BYTE $07
	.BYTE $FC
	.BYTE $07
	.BYTE $FD
	.BYTE $07
	.BYTE $FE
	.BYTE $07
	.BYTE $FE
	.BYTE $07
	.BYTE $FF
	.BYTE $07
	.BYTE $FF
	.BYTE $07
	.BYTE $FF
	.BYTE $07
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $00
	.BYTE $08
	.BYTE $FF
	.BYTE $07
	.BYTE $FF
	.BYTE $07
	.BYTE $FF
	.BYTE $07
	.BYTE $FE
	.BYTE $07
	.BYTE $FE
	.BYTE $07
	.BYTE $FD
	.BYTE $07
	.BYTE $FC
	.BYTE $07
	.BYTE $FB
	.BYTE $07
	.BYTE $FA
	.BYTE $07
	.BYTE $F9
	.BYTE $07
	.BYTE $F8
	.BYTE $07
	.BYTE $F7
	.BYTE $07
	.BYTE $F6
	.BYTE $07
	.BYTE $F5
	.BYTE $07
	.BYTE $F4
	.BYTE $07
	.BYTE $F2
	.BYTE $07
	.BYTE $F1
	.BYTE $07
	.BYTE $EF
	.BYTE $07
	.BYTE $ED
	.BYTE $07
	.BYTE $EC
	.BYTE $07
	.BYTE $EA
	.BYTE $07
	.BYTE $E8
	.BYTE $07
	.BYTE $E6
	.BYTE $07
	.BYTE $E4
	.BYTE $07
	.BYTE $E2
	.BYTE $07
	.BYTE $E0
	.BYTE $07
	.BYTE $DD
	.BYTE $07
	.BYTE $DB
	.BYTE $07
	.BYTE $D9
	.BYTE $07
	.BYTE $D6
	.BYTE $07
	.BYTE $D4
	.BYTE $07
	.BYTE $D1
	.BYTE $07
	.BYTE $CE
	.BYTE $07
	.BYTE $CB
	.BYTE $07
	.BYTE $C9
	.BYTE $07
	.BYTE $C6
	.BYTE $07
	.BYTE $C3
	.BYTE $07
	.BYTE $C0
	.BYTE $07
	.BYTE $BC
	.BYTE $07
	.BYTE $B9
	.BYTE $07
	.BYTE $B6
	.BYTE $07
	.BYTE $B2
	.BYTE $07
	.BYTE $AF
	.BYTE $07
	.BYTE $AB
	.BYTE $07
	.BYTE $A8
	.BYTE $07
	.BYTE $A4
	.BYTE $07
	.BYTE $A0
	.BYTE $07
	.BYTE $9D
	.BYTE $07
	.BYTE $99
	.BYTE $07
	.BYTE $95
	.BYTE $07
	.BYTE $91
	.BYTE $07
	.BYTE $8C
	.BYTE $07
	.BYTE $88
	.BYTE $07
	.BYTE $84
	.BYTE $07
	.BYTE $80
	.BYTE $07
	.BYTE $7B
	.BYTE $07
	.BYTE $77
	.BYTE $07
	.BYTE $72
	.BYTE $07
	.BYTE $6E
	.BYTE $07
	.BYTE $69
	.BYTE $07
	.BYTE $64
	.BYTE $07
	.BYTE $5F
	.BYTE $07
	.BYTE $5A
	.BYTE $07
	.BYTE $55
	.BYTE $07
	.BYTE $50
	.BYTE $07
	.BYTE $4B
	.BYTE $07
	.BYTE $46
	.BYTE $07
	.BYTE $41
	.BYTE $07
	.BYTE $3B
	.BYTE $07
	.BYTE $36
	.BYTE $07
	.BYTE $30
	.BYTE $07
	.BYTE $2B
	.BYTE $07
	.BYTE $25
	.BYTE $07
	.BYTE $20
	.BYTE $07
	.BYTE $1A
	.BYTE $07
	.BYTE $14
	.BYTE $07
	.BYTE $0E
	.BYTE $07
	.BYTE $08
	.BYTE $07
	.BYTE $02
	.BYTE $07
	.BYTE $FC
	.BYTE $06
	.BYTE $F6
	.BYTE $06
	.BYTE $F0
	.BYTE $06
	.BYTE $E9
	.BYTE $06
	.BYTE $E3
	.BYTE $06
	.BYTE $DD
	.BYTE $06
	.BYTE $D6
	.BYTE $06
	.BYTE $D0
	.BYTE $06
	.BYTE $C9
	.BYTE $06
	.BYTE $C2
	.BYTE $06
	.BYTE $BC
	.BYTE $06
	.BYTE $B5
	.BYTE $06
	.BYTE $AE
	.BYTE $06
	.BYTE $A7
	.BYTE $06
	.BYTE $A0
	.BYTE $06
	.BYTE $99
	.BYTE $06
	.BYTE $92
	.BYTE $06
	.BYTE $8A
	.BYTE $06
	.BYTE $83
	.BYTE $06
	.BYTE $7C
	.BYTE $06
	.BYTE $74
	.BYTE $06
	.BYTE $6D
	.BYTE $06
	.BYTE $65
	.BYTE $06
	.BYTE $5E
	.BYTE $06
	.BYTE $56
	.BYTE $06
	.BYTE $4F
	.BYTE $06
	.BYTE $47
	.BYTE $06
	.BYTE $3F
	.BYTE $06
	.BYTE $37
	.BYTE $06
	.BYTE $2F
	.BYTE $06
	.BYTE $27
	.BYTE $06
	.BYTE $1F
	.BYTE $06
	.BYTE $17
	.BYTE $06
	.BYTE $0F
	.BYTE $06
	.BYTE $07
	.BYTE $06
	.BYTE $FE
	.BYTE $05
	.BYTE $F6
	.BYTE $05
	.BYTE $ED
	.BYTE $05
	.BYTE $E5
	.BYTE $05
	.BYTE $DC
	.BYTE $05
	.BYTE $D4
	.BYTE $05
	.BYTE $CB
	.BYTE $05
	.BYTE $C3
	.BYTE $05
	.BYTE $BA
	.BYTE $05
	.BYTE $B1
	.BYTE $05
	.BYTE $A8
	.BYTE $05
	.BYTE $9F
	.BYTE $05
	.BYTE $96
	.BYTE $05
	.BYTE $8D
	.BYTE $05
	.BYTE $84
	.BYTE $05
	.BYTE $7B
	.BYTE $05
	.BYTE $72
	.BYTE $05
	.BYTE $69
	.BYTE $05
	.BYTE $5F
	.BYTE $05
	.BYTE $56
	.BYTE $05
	.BYTE $4D
	.BYTE $05
	.BYTE $43
	.BYTE $05
	.BYTE $3A
	.BYTE $05
	.BYTE $30
	.BYTE $05
	.BYTE $27
	.BYTE $05
	.BYTE $1D
	.BYTE $05
	.BYTE $13
	.BYTE $05
	.BYTE $09
	.BYTE $05
	.BYTE $00
	.BYTE $05
	.BYTE $F6
	.BYTE $04
	.BYTE $EC
	.BYTE $04
	.BYTE $E2
	.BYTE $04
	.BYTE $D8
	.BYTE $04
	.BYTE $CE
	.BYTE $04
	.BYTE $C4
	.BYTE $04
	.BYTE $BA
	.BYTE $04
	.BYTE $B0
	.BYTE $04
	.BYTE $A6
	.BYTE $04
	.BYTE $9B
	.BYTE $04
	.BYTE $91
	.BYTE $04
	.BYTE $87
	.BYTE $04
	.BYTE $7C
	.BYTE $04
	.BYTE $72
	.BYTE $04
	.BYTE $67
	.BYTE $04
	.BYTE $5D
	.BYTE $04
	.BYTE $52
	.BYTE $04
	.BYTE $48
	.BYTE $04
	.BYTE $3D
	.BYTE $04
	.BYTE $32
	.BYTE $04
	.BYTE $28
	.BYTE $04
	.BYTE $1D
	.BYTE $04
	.BYTE $12
	.BYTE $04
	.BYTE $07
	.BYTE $04
	.BYTE $FC
	.BYTE $03
	.BYTE $F1
	.BYTE $03
	.BYTE $E7
	.BYTE $03
	.BYTE $DC
	.BYTE $03
	.BYTE $D0
	.BYTE $03
	.BYTE $C5
	.BYTE $03
	.BYTE $BA
	.BYTE $03
	.BYTE $AF
	.BYTE $03
	.BYTE $A4
	.BYTE $03
	.BYTE $99
	.BYTE $03
	.BYTE $8E
	.BYTE $03
	.BYTE $82
	.BYTE $03
	.BYTE $77
	.BYTE $03
	.BYTE $6C
	.BYTE $03
	.BYTE $60
	.BYTE $03
	.BYTE $55
	.BYTE $03
	.BYTE $49
	.BYTE $03
	.BYTE $3E
	.BYTE $03
	.BYTE $32
	.BYTE $03
	.BYTE $27
	.BYTE $03
	.BYTE $1B
	.BYTE $03
	.BYTE $10
	.BYTE $03
	.BYTE $04
	.BYTE $03
	.BYTE $F8
	.BYTE $02
	.BYTE $ED
	.BYTE $02
	.BYTE $E1
	.BYTE $02
	.BYTE $D5
	.BYTE $02
	.BYTE $CA
	.BYTE $02
	.BYTE $BE
	.BYTE $02
	.BYTE $B2
	.BYTE $02
	.BYTE $A6
	.BYTE $02
	.BYTE $9A
	.BYTE $02
	.BYTE $8E
	.BYTE $02
	.BYTE $82
	.BYTE $02
	.BYTE $76
	.BYTE $02
	.BYTE $6B
	.BYTE $02
	.BYTE $5F
	.BYTE $02
	.BYTE $53
	.BYTE $02
	.BYTE $46
	.BYTE $02
	.BYTE $3A
	.BYTE $02
	.BYTE $2E
	.BYTE $02
	.BYTE $22
	.BYTE $02
	.BYTE $16
	.BYTE $02
	.BYTE $0A
	.BYTE $02
	.BYTE $FE
	.BYTE $01
	.BYTE $F2
	.BYTE $01
	.BYTE $E5
	.BYTE $01
	.BYTE $D9
	.BYTE $01
	.BYTE $CD
	.BYTE $01
	.BYTE $C1
	.BYTE $01
	.BYTE $B4
	.BYTE $01
	.BYTE $A8
	.BYTE $01
	.BYTE $9C
	.BYTE $01
	.BYTE $90
	.BYTE $01
	.BYTE $83
	.BYTE $01
	.BYTE $77
	.BYTE $01
	.BYTE $6B
	.BYTE $01
	.BYTE $5E
	.BYTE $01
	.BYTE $52
	.BYTE $01
	.BYTE $45
	.BYTE $01
	.BYTE $39
	.BYTE $01
	.BYTE $2D
	.BYTE $01
	.BYTE $20
	.BYTE $01
	.BYTE $14
	.BYTE $01
	.BYTE $07
	.BYTE $01
	.BYTE $FB
	.BYTE $00
	.BYTE $EE
	.BYTE $00
	.BYTE $E2
	.BYTE $00
	.BYTE $D5
	.BYTE $00
	.BYTE $C9
	.BYTE $00
	.BYTE $BC
	.BYTE $00
	.BYTE $B0
	.BYTE $00
	.BYTE $A3
	.BYTE $00
	.BYTE $97
	.BYTE $00
	.BYTE $8A
	.BYTE $00
	.BYTE $7E
	.BYTE $00
	.BYTE $71
	.BYTE $00
	.BYTE $64
	.BYTE $00
	.BYTE $58
	.BYTE $00
	.BYTE $4B
	.BYTE $00
	.BYTE $3F
	.BYTE $00
	.BYTE $32
	.BYTE $00
	.BYTE $26
	.BYTE $00
	.BYTE $19
	.BYTE $00
	.BYTE $0D
	.BYTE $00

L_CAEE:
	LDX #$25
	LDY #$08
	LDA #$00
	STA $01
@ready_thread:
	LDA $00,X
	CMP #$11
	BNE @next_thread
	DEC $01,X
	BNE @next_thread
	LDA #$13
	STA A:$00,X
	STX $01
@next_thread:
	TXA
	SEC
	SBC #$05
	TAX
	DEY
	BNE @ready_thread
	BIT $2B
	BMI L_CB2B
	BIT $2C
	BMI L_CB2B
	LDX $01
	BEQ L_CB2B
	LDY $00
	LDA $0000,Y
	CMP #$12
	BNE start_all_threads
	CPX $00
	BCS L_CB2B
	JMP L_CC0D
L_CB2B:
	SEI
	LDY #$06
	STY BANK_SELECT
	LDA BANK_8000
	STA BANK_DATA
	INY
	STY BANK_SELECT
	LDA BANK_A000
	STA BANK_DATA
L_CB3F:
	LDA $34
	STA BANK_SELECT
	LDY $0302
	LDX $0301
	LDA $0300
	RTI

start_all_threads:
; Reset Stack
	LDX #$FF
	TXS
;
	LSR $2A
; Find Ready Thread
	LDX #$02
find_thread:
	LDA $00,X
	CMP #$12
	BCS do_thread
next_thread:
	TXA
	CLC
	ADC #$05
	TAX
	CPX #$2A
	BCC find_thread
	BCS start_all_threads

do_thread:
	SEC
	ROR $2A
	STX $00
	CMP #$14
	BEQ thread_first_run
	LDA MODE_8000
	ORA #$06
	STA SOFT_8000
	STA BANK_SELECT
	LDA $03,X
	STA BANK_8000
	STA BANK_DATA
	LDA MODE_8000
	ORA #$07
	STA SOFT_8000
	STA BANK_SELECT
	LDA $04,X
	STA BANK_A000
	STA BANK_DATA
	LDA $00,X
	CMP #$12
	BEQ L_CBBE
	LDA #$12
	STA $00,X
	LDA $02,X
	TAX
	TXS
	PLA
	STA $3E
	PLA
	STA $3F
	PLA
	STA $40
	PLA
	STA $41
	PLA
	STA $42
	PLA
	STA $43
	PLA
	STA $44
	PLA
	STA $45
	PLA
	TAY
	PLA
	TAX
	PLA
	PLP
	LSR $2A
	RTS

L_CBBE:
	LDA $02,X
	TAX
	TXS
	PLA
	STA $3E
	PLA
	STA $3F
	PLA
	STA $40
	PLA
	STA $41
	PLA
	STA $42
	PLA
	STA $43
	PLA
	STA $44
	PLA
	STA $45
	PLA
	TAY
	PLA
	TAX
	PLA
	LSR $2A
	RTI

thread_first_run:
	LDA #$12
	STA $00,X
	LDA $03,X
	PHA
	LDA $02,X
	PHA
	LDA MODE_8000
	ORA #$06
	STA SOFT_8000
	STA BANK_SELECT
	LDA $04,X
	STA BANK_8000
	STA BANK_DATA
	LDA MODE_8000
	ORA #$07
	STA SOFT_8000
	STA BANK_SELECT
	LDA $04,X
	STA BANK_A000
	STA BANK_DATA
	RTS

L_CC0D:
	LDA $0300
	PHA
	LDA $0301
	PHA
	LDA $0302
	PHA
	LDA $45
	PHA
	LDA $44
	PHA
	LDA $43
	PHA
	LDA $42
	PHA
	LDA $41
	PHA
	LDA $40
	PHA
	LDA $3F
	PHA
	LDA $3E
	PHA
	TXA
	LDY $00
	TSX
	STX $02,Y
	LDX BANK_8000
	STX $03,Y
	LDX BANK_A000
	STX $04,Y
	TAX
	LDA $00,X
	JMP do_thread

create_thread:
	STY $02,X
	STA $03,X
	LDA #$14
	STA $00,X
	JMP L_CCE2

destroy_thread:
	LDA #$00
	LDX $00
	STA $00,X
	JMP start_all_threads

L_CC59:
	SEC
	ROR $2A
	PHP
	PHA
	TXA
	PHA
	TYA
	PHA
	LDA $45
	PHA
	LDA $44
	PHA
	LDA $43
	PHA
	LDA $42
	PHA
	LDA $41
	PHA
	LDA $40
	PHA
	LDA $3F
	PHA
	LDA $3E
	PHA
	TSX
	TXA
	LDX $00
	STA $02,X
	LDA #$03
	STA $00,X
	LDA BANK_8000
	STA $03,X
	LDA BANK_A000
	STA $04,X
	JMP start_all_threads

L_CC8F:
	LDA $00,X
	ORA #$10
	STA $00,X
	LDA #$01
	STA $01,X
	RTS

switch_thread:
	SEC
	ROR $2A
	PHP
	PHA
	TXA
	PHA
	TYA
	PHA
	LDA $45
	PHA
	LDA $44
	PHA
	LDA $43
	PHA
	LDA $42
	PHA
	LDA $41
	PHA
	LDA $40
	PHA
	LDA $3F
	PHA
	LDA $3E
	PHA
	TSX
	LDY $00
	STX $02,Y
	LDA $010B,X
	LDX $00
	STA $01,X
	LDA #$11
	STA $00,X
	LDA BANK_8000
	STA $03,X
	LDA BANK_A000
	STA $04,X
	LDX #$FF
	TXS
	LSR $2A
	LDX $00
	JMP next_thread

L_CCDD:
	LDA #$00
	STA A:$00,X
L_CCE2:
	TXA
	EOR $64
	AND #$3F
	BNE @Loop1
	LDA $64
	AND #$40
	STA $64
@Loop1:
	TXA
	EOR $037E
	AND #$3F
	BNE @Loop2
	LDA #$00
	STA $64
@Loop2:
	RTS

set_vram_controls:
	LDA BG_PALETTE_FADE
	ORA SPRITE_PALETTE_FADE
	BNE vram_buffer_controls
	JMP vram_direct_controls
vram_buffer_controls:
	JSR vram_transfer_start
; Store Beginning Column
	LDA TEMP65
	STA TEMP67
@next:
	LDY #$00
	LDA (TEMP3E),Y
	BMI @control
	LDY TEMP65_LO
	LDX TEMP65_HI
	JSR buffer_add
; Store Buffer Length
	AND #$3F
	STA TEMP68
; Store into Buffer
	LDY #$01
@more:
	LDA (TEMP3E),Y
	STA BUFFER,X
	INY
	INX
	INC TEMP65_LO
	DEC TEMP68
	BNE @more
; Update Data Address
	TYA
	CLC
	ADC TEMP3E_LO
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC #$00
	STA TEMP3E_HI
; Set end of buffer
	JSR buffer_end
	JMP @next
@control:
	CMP #$FF ; Finished
	BEQ @exit
	CMP #$FE ; Wait
	BEQ @wait
	CMP #$FD ; Set New Data Location
	BEQ @set_data
	CMP #$E0 ; Skip Ahead
	BCS @column
	CMP #$C0 ; Skip Ahead and New Column
	BCS @column_new
	CMP #$A0 ; Set Below Original Column
	BCS @row
; Repeat A - x80
	SEC
	SBC #$80
	LDY TEMP65_LO
	LDX TEMP65_HI
	JSR buffer_add
; Store Buffer Length
	STA TEMP68
; Store into Buffer
	LDY #$01
	LDA (TEMP3E),Y
@repeat:
	STA BUFFER,X
	INX
	INC TEMP65_LO
	DEC TEMP68
	BNE @repeat
; Set end of buffer
	JSR buffer_end
; Update Data Address
	LDA TEMP3E_LO
	CLC
	ADC #$02
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC #$00
	STA TEMP3E_HI
	JMP @next
@row:
; Set A - xA0 Rows Below Original Column
	JSR vram_row_control
	JMP @next
@column_new:
; Set Location Ahead A - xC0 and Set New Column
	SEC
	SBC #$C0
	JSR vram_column_control
; Store New Column
	LDA TEMP65
	STA TEMP67
	JMP @next
@column:
; Set Location Ahead A - xE0
	SEC
	SBC #$E0
	JSR vram_column_control
	JMP @next
@set_data:
; Set New Data Location
	LDY #$02
	LDA (TEMP3E),Y
	TAX
	DEY
	LDA (TEMP3E),Y
	STA TEMP3E_LO
	STX TEMP3E_HI
	JMP @next
@wait:
	LDA $C8
	JSR switch_thread
; Update Data Address
	INC TEMP3E_LO
	BNE @no_inc_hi
	INC TEMP3E_HI
@no_inc_hi:
	JMP @next
@exit:
	JMP vram_transfer_finished

vram_direct_controls:
	JSR vram_transfer_start
	JSR disable_nmi
	LDA PPUSTATUS
; Store Beginning Column
	LDA TEMP65
	STA TEMP67
@next:
	LDY #$00
	LDA (TEMP3E),Y
	BMI @control
; Set VRAM increment
	AND #$40
	LSR
	LSR
	LSR
	LSR
	STA PPUCTRL
; Set to VRAM Address
	LDA TEMP65_HI
	STA PPUADDR
	LDA TEMP65_LO
	STA PPUADDR
; Get Length
	LDA (TEMP3E),Y
	AND #$3F
	TAX
; Store in VRAM
	INY
@more:
	LDA (TEMP3E),Y
	STA PPUDATA
	INY
	INC TEMP65_LO
	DEX
	BNE @more
; Update Data Address
	TYA
	CLC
	ADC TEMP3E_LO
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC #$00
	STA TEMP3E_HI
	JMP @next
@control:
	CMP #$FF ; Finished
	BEQ @exit
	CMP #$FE ; Wait
	BEQ @wait
	CMP #$FD ; Set New Data Location
	BEQ @set_data
	CMP #$E0 ; Skip Ahead
	BCS @column
	CMP #$C0 ; Skip Ahead and New Column
	BCS @column_new
	CMP #$A0 ; Set Below Original Column
	BCS @row
; Repeat A - x80
; Get Length
	SEC
	SBC #$80
	AND #$3F
	TAX
; Set to VRAM Address
	LDA TEMP65_HI
	STA PPUADDR
	LDA TEMP65_LO
	STA PPUADDR
; Store into VRAM
	INY
	LDA (TEMP3E),Y
@repeat:
	STA PPUDATA
	INY
	INC TEMP65_LO
	DEX
	BNE @repeat
; Update Data Address
	LDA TEMP3E_LO
	CLC
	ADC #$02
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC #$00
	STA TEMP3E_HI
	JMP @next
@row:
; Set A - xA0 Rows Below Original Column
	JSR vram_row_control
	JMP @next
@column_new:
; Set Location Ahead A - xC0 and Set New Column
	SEC
	SBC #$C0
	JSR vram_column_control
; Store New Column
	LDA TEMP65
	STA TEMP67
	JMP @next
@column:
; Set Location Ahead A - xE0
	SEC
	SBC #$E0
	JSR vram_column_control
	JMP @next
@set_data:
; Set New Data Location
	LDY #$02
	LDA (TEMP3E),Y
	TAX
	DEY
	LDA (TEMP3E),Y
	STA TEMP3E_LO
	STX TEMP3E_HI
	JMP @next
@wait:
; Update Data Address
	INC TEMP3E_LO
	BNE @no_inc_hi
	INC TEMP3F_HI
@no_inc_hi:
	JMP @next
@exit:
	JSR enable_nmi
	JMP vram_transfer_finished

vram_row_control:
; Get rows below original column
	SEC
	SBC #$A0
	STA TEMP67_HI
; Update VRAM Location
	LDA #$00
	LSR TEMP67_HI
	ROR
	LSR TEMP67_HI
	ROR
	LSR TEMP67_HI
	ROR
	CLC
	ADC TEMP67_LO
	STA TEMP67_LO
	STA TEMP65_LO
	LDA TEMP67_HI
	ADC TEMP65_HI
	STA TEMP65_HI
; Update Data Location
	INC TEMP3E_LO
	BNE :+
	INC TEMP3E_HI
:	RTS

vram_column_control:
; Update VRAM Address
	CLC
	ADC TEMP65_LO
	STA TEMP65_LO
	LDA #$00
	ADC TEMP65_HI
	STA TEMP65_HI
; Update Data Location
	INC TEMP3E_LO
	BNE :+
	INC TEMP3E_HI
: 	RTS

L_CEB9:
	JSR vram_transfer_start
	LDY #$00
	LDA ($3E),Y
	STA $67
	INY
	LDA ($3E),Y
	STA $68
	LDA #$02
@Loop1:
	CLC
	ADC $3E
	STA $3E
	LDA $3F
	ADC #$00
	STA $3F
	LDY $65
	LDX $66
	LDA $68
	JSR buffer_add
	LDY #$00
@Loop2:
	LDA ($3E),Y
	STA $033A,X
	INX
	INY
	CPY $68
	BNE @Loop2
	JSR buffer_end
	LDA $65
	CLC
	ADC #$20
	STA $65
	LDA $66
	ADC #$00
	STA $66
	LDA $68
	DEC $67
	BNE @Loop1
	JMP vram_transfer_finished

buffer_large_text:
	PHA
	JSR vram_transfer_start
; Store Length
	PLA
	STA TEMP67
; Set to Upper Half
	LDA #$00
	JSR buffer_large_text_half
; Update VRAM Address
	LDA TEMP65_LO
	CLC
	ADC #$20
	STA TEMP65_LO
	LDA TEMP65_HI
	ADC #$00
	STA TEMP65_HI
; Set to Lower Half
	LDA #$76
	JSR buffer_large_text_half
	JMP vram_transfer_finished

buffer_large_text_half:
; Store Letter Half
	STA TEMP68
; Store Buffer Length and Address
	LDA TEMP67
	ASL
	LDY TEMP65_LO
	LDX TEMP65_HI
	JSR buffer_add
; Store Length
	LDA TEMP67
	STA TEMP41
; Set Length Read
	LDA #$00
	STA TEMP40
@more:
	LDY TEMP40
	LDA (TEMP3E),Y
; Check for small letters
	CMP #$61
	BCC @store
; Change to capital letter
	AND #$DF
@store:
; Get Letter Index
	SEC
	SBC #$20
	ASL
	CLC
	ADC TEMP68
; Store Letter Half
	TAY
	LDA LARGE_TEXT+0,Y
	STA BUFFER,X
	INX
	LDA LARGE_TEXT+1,Y
	STA BUFFER,X
	INX
; Update Length Read
	INC TEMP40
; Check for end
	DEC TEMP41
	BNE @more
	JMP buffer_end

L_CF61:
	PHA
	JSR vram_transfer_start
; Get Y Index
	PLA
	ASL
	TAY
; Store and Swap A000 Bank
	LDA BANK_A000
	STA TEMP3F
	LDX #$0F ; BANK16
	JSR bank_swap_A000
; Get Team Initial Pointer
	LDA TEAM_NAME_POINTERS+0,Y
	STA TEMP67_LO
	LDA TEAM_NAME_POINTERS+1,Y
	STA TEMP67_HI
; Get Length
	LDA TEAM_NAME_POINTERS+2,Y
	SEC
	SBC TEMP67_LO
	STA TEMP3E
; Store VRAM Address and Length in Buffer
	LDY TEMP65_LO
	LDX TEMP65_HI
	JSR buffer_add
; Store Initials into Buffer
	LDY #$00
@more:
	LDA (TEMP67),Y
	STA BUFFER,X
	INY
	INX
	DEC TEMP3E
	BNE @more
; Set End of Buffer
	JSR buffer_end
	JSR vram_transfer_finished
; Return A000 Bank
	LDX TEMP3F
	JMP bank_swap_A000

L_CFA2:
	CLC
	JMP @Loop1
	SEC
@Loop1:
	ROR $3F
	PHA
	JSR vram_transfer_start
	PLA
	ASL
	TAY
	LDA $3F
	AND #$80
	ORA $2F
	STA $3F
	LDX #$0F ; BANK16
	JSR bank_swap_A000
	LDA TEAM_NAME_POINTERS,Y
	STA $67
	LDA TEAM_NAME_POINTERS+1,Y
	STA $68
	LDA TEAM_NAME_POINTERS+2,Y
	SEC
	SBC $67
	STA $3E
	LDY $65
	LDX $66
	LDA $45
	JSR buffer_add
	STX $41
	LDY $45
	LDA #$00
@Loop2:
	STA $033A,X
	INX
	DEY
	BNE @Loop2
	STX $40
	LDA $45
	SEC
	SBC $3E
	BIT $3F
	BMI @Loop3
	LSR
@Loop3:
	CLC
	ADC $41
	TAX
	LDY #$00
@Loop4:
	LDA ($67),Y
	STA $033A,X
	INY
	INX
	DEC $3E
	BNE @Loop4
	LDX $40
	JSR buffer_end
	JSR vram_transfer_finished
	LDA $3F
	AND #$7F
	TAX
	JMP bank_swap_A000

L_D012:
	ASL
	STA $40
	STX $41
	LDA $2F
	PHA
	LDX #$0F ; BANK16
	JSR bank_swap_A000
	LDX $40
	LDA TEAM_NAME_POINTERS,X
	STA $3E
	LDA TEAM_NAME_POINTERS+1,X
	STA $3F
	LDA TEAM_NAME_POINTERS+2,X
	SEC
	SBC $3E
	LDX $41
	JSR buffer_large_text
	PLA
	TAX
	JMP bank_swap_A000

L_D03B:
	ASL
	STA $3F
	STY $40
	STX $41
	LDA $2F
	PHA
	LDX #$0F ; BANK16
	JSR bank_swap_A000
	LDX $3F
	LDA TEAM_NAME_POINTERS,X
	STA $3E
	LDA TEAM_NAME_POINTERS+1,X
	STA $3F
	LDA TEAM_NAME_POINTERS+2,X
	SEC
	SBC $3E
	JMP L_D081

	ASL
	STA $3F
	STY $40
	STX $41
	LDA $2F
	PHA
	LDX #$0F ; BANK16
	JSR bank_swap_A000
	LDX $3F
	LDA TEAM_NAME_POINTERS,X
	STA $3E
	LDA TEAM_NAME_POINTERS+1,X
	STA $3F
	LDA TEAM_NAME_POINTERS+2,X
	ASL
	SEC
	SBC $3E
L_D081:
	STA $43
	LDA $45
	SEC
	SBC $43
	CLC
	ADC $40
	TAY
	LDA $41
	ADC #$00
	TAX
	LDA $43
	JSR buffer_large_text
	PLA
	TAX
	JMP bank_swap_A000

clear_vram_size:
; Store Tile
	LDA #$00
set_vram_size:
	STA TEMP41
; Check for Direct Write to PPU
	LDA BG_PALETTE_FADE
	ORA SPRITE_PALETTE_FADE
	BEQ @direct
; Write to Buffer
	JSR vram_transfer_start
@next:
	LDA TEMP3E
	LDY TEMP65_LO
	LDX TEMP65_HI
	JSR buffer_add
; Store in Buffer
	LDY TEMP3E
	LDA TEMP41
@more:
	STA BUFFER,X
	INX
	DEY
	BNE @more
	JSR buffer_end
; Check for Wait
	LDA $C8
	BEQ @no_wait
	JSR switch_thread
@no_wait:
; Update VRAM Address
	LDA TEMP65_LO
	CLC
	ADC #$20
	STA TEMP65_LO
	LDA TEMP65_HI
	ADC #$00
	STA TEMP65_HI
; Check for another buffer
	DEC TEMP3F
	BNE @next
	JMP vram_transfer_finished
; Direct Write to PPU
@direct:
	JSR vram_transfer_start
	JSR disable_nmi
@direct_next:
	LDA PPUSTATUS
; Set to VRAM Adress
	LDA TEMP65_HI
	STA PPUADDR
	LDA TEMP65_LO
	STA PPUADDR
; Store in VRAM
	LDX TEMP3E
	LDA TEMP41
@direct_more:
	STA PPUDATA
	DEX
	BNE @direct_more
; Update VRAM Address
	LDA TEMP65_LO
	CLC
	ADC #$20
	STA TEMP65_LO
	LDA TEMP65_HI
	ADC #$00
	STA TEMP65_HI
; Check for another write
	DEC TEMP3F
	BNE @direct_next
	JSR enable_nmi
	JMP vram_transfer_finished

clear_nametables:
; Clear $2000-$2BFF
; Set VRAM Address
	LDY #<$2000
	LDX #>$2000
; Store Amount
	LDA #$60
	STA TEMP3F
; Store Length
	LDA #$20
	STA TEMP3E
	JMP clear_vram_size

clear_2800_nametable:
; Clear $2800-$2BFF
	LDX #>$2800
	JMP clear_nametable
clear_2400_nametable:
; Clear $2400-$27FF
	LDX #>$2400
	JMP clear_nametable
clear_2000_nametable:
; Clear $2000-$23FF
	LDX #>$2000
clear_nametable:
	LDY #$00
; Store Amount
	LDA #$20
	STA TEMP3F
; Store Length
	LDA #$20
	STA TEMP3E
	JMP clear_vram_size

get_palette_fade_in:
	STA BG_PALETTE
	STX SPRITE_PALETTE
	JSR get_background_palette
	JSR get_sprite_palette
palette_fade_in:
	LDA BG_PALETTE_FADE
	CMP #$0F
	BCS @sprite
	INC BG_PALETTE_FADE
@sprite:
	LDA SPRITE_PALETTE_FADE
	CMP #$0F
	BCS @buffer
	INC SPRITE_PALETTE_FADE
@buffer:
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	LDA BG_PALETTE_FADE
	CLC
	ADC SPRITE_PALETTE_FADE
	CMP #$1E
	BCC palette_fade_in
	RTS

get_bg_palette_fade_in:
	STA BG_PALETTE
	JSR get_background_palette
@more:
	LDA BG_PALETTE_FADE
	CMP #$0F
	BCS @exit
	INC BG_PALETTE_FADE
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	JMP @more
@exit:
	RTS

get_sprite_palette_fade_in:
	STA SPRITE_PALETTE
	JSR get_sprite_palette
@more:
	LDA SPRITE_PALETTE_FADE
	CMP #$0F
	BCS @exit
	INC SPRITE_PALETTE_FADE
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	JMP @more
@exit:
	RTS

palette_fade_out:
	LDA BG_PALETTE_FADE
	ORA SPRITE_PALETTE_FADE
	BEQ @exit
	TAX
	BEQ @sprite
	DEC BG_PALETTE_FADE
@sprite:
	LDA SPRITE_PALETTE_FADE
	BEQ @buffer
	DEC SPRITE_PALETTE_FADE
@buffer:
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	JMP palette_fade_out
@exit:
	RTS

bg_palette_fade_out:
	LDA BG_PALETTE_FADE
	BEQ @exit
	DEC BG_PALETTE_FADE
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	JMP bg_palette_fade_out
@exit:
	RTS

sprite_palette_fade_out:
	LDA SPRITE_PALETTE_FADE
	BEQ @exit
	DEC SPRITE_PALETTE_FADE
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	JMP sprite_palette_fade_out
@exit:
	RTS

new_palette_no_fade:
	STA BG_PALETTE
	STX SPRITE_PALETTE
get_palette_no_fade:
	JSR get_background_palette
	JSR get_sprite_palette
palette_no_fade:
	LDA #$0F
	STA BG_PALETTE_FADE
	STA SPRITE_PALETTE_FADE
	JMP buffer_palette

get_bg_palette_no_fade:
	STA BG_PALETTE
	JSR get_background_palette
	LDA #$0F
	STA BG_PALETTE_FADE
	JMP buffer_palette

get_sprite_palette_no_fade:
	STA SPRITE_PALETTE
	JSR get_sprite_palette
	LDA #$0F
	STA SPRITE_PALETTE_FADE

buffer_palette:
	LDA #$20
	LDY #<$3F00
	LDX #>$3F00
	JSR buffer_add
	STX TEMP3F
	LDY #$00
@more:
	LDA PALETTE_BUFFER,Y
	AND #$30
; Check for BG or Sprite Color
	CPY #$10
	BCS @sprite
; Set BG Fade Amount
	CLC
	ADC BG_PALETTE_FADE
	JMP @set
@sprite:
; Set Sprite Fade Amount
	CLC
	ADC SPRITE_PALETTE_FADE
@set:
; Get Fade Color
	TAX
	LDA PALETTE_BUFFER,Y
	AND #$0F
	ORA PALETTE_FADE,X
; Store Color in Buffer
	LDX TEMP3F
	STA BUFFER,X
; Increase Buffer Length
	INC TEMP3F
; Check for end
	INY
	CPY #$20
	BCC @more
; Get Buffer Length
	LDX TEMP3F
	JMP buffer_end

get_background_palette:
	LDA #$00
	BEQ get_palette
get_sprite_palette:
	LDA #$01
get_palette:
; Store Palette Type
	STA TEMP3F
; Store A000 Bank
	LDA BANK_A000
	STA TEMP41
; Get Palette Location
	LDX #$0D ; BANK14
	JSR bank_swap_A000
	LDA TEMP3F
	TAY
	ASL
	TAX
	LDA PALETTE,Y
	LDY #$00
	STY TEMP3E_HI
	ASL
	ROL TEMP3E_HI
	ASL
	ROL TEMP3E_HI
	ASL
	ROL TEMP3E_HI
	ASL
	ROL TEMP3E_HI
	CLC
	ADC @location+0,X
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC @location+1,X
	STA TEMP3E_HI
	TXA
	ASL
	ASL
	ASL
	TAX
; Store Palette
@more:
	LDA (TEMP3E),Y
	STA PALETTE_BUFFER,X
	INX
	INY
	CPY #$10
	BNE @more
; Return A000 Bank
	LDX TEMP41
	JMP bank_swap_A000
	RTS
@location:	.WORD $A000,$A600 ; BANK14

set_palette_fade_to_out:
	LDA #$0F
	JMP set_palette_fade
set_palette_fade_to_in:
	LDA #$00
set_palette_fade:
	STA BG_PALETTE_FADE
	STA SPRITE_PALETTE_FADE
	JSR buffer_palette
	LDA #$01
	JSR switch_thread
	RTS

buffer_add:
	PHA
	BIT $2B
	BPL @ready
@wait:
	LDA #$01
	JSR switch_thread
	PLA
	JMP buffer_add
@ready:
; Check Buffer has enough size left
	AND #$3F
	CLC
	ADC BUFFER_SIZE
	CMP #$3F
	BCS @wait
; Set Not Ready
	SEC
	ROR $2B
; Store VRAM Address
	TXA
	LDX BUFFER_SIZE
	STA BUFFER_HI,X
	TYA
	STA BUFFER_LO,X
; Store Buffer Length
	PLA
	STA BUFFER_LENGTH,X
	INX
	INX
	INX
	RTS

buffer_end:
; Store Buffer End
	LDA #$00
	STA BUFFER,X
; Store Buffer Size
	STX BUFFER_SIZE
; Set to Ready
	LSR $2B
	RTS

vram_transfer_start:
; Check for ready
	LDA $64
	BPL @ready
; wait
	LDA #$01
	JSR switch_thread
	JMP vram_transfer_start
@ready:
; Set to Not Ready
	ORA #$80
	ORA $00
	STA $64
; Store
	STY TEMP65_LO
	STX TEMP65_HI
	RTS

vram_transfer_finished:
	LDA $64
	AND #$40
	STA $64
	RTS

L_D2F1:
	JSR vram_transfer_start
@check:
; Check for Buffer Ready
	BIT $2B
	BMI @wait
	LDA BUFFER_SIZE
	BEQ @ready
@wait:
	LDA #$01
	JSR switch_thread
	JMP @check
@ready:
; Set to Not Ready
	SEC
	ROR $2B
; Set to Read VRAM
	LDA #$80
	STA BUFFER_SIZE
; Set to store read length and address
	LDX #$00
@Loop4:
; Set to next buffer
	TXA
	CLC
	ADC #$03
	CLC
	ADC TEMP66
; Check for End of Buffer
	CMP #$3F
	BCS @Loop5
; Store VRAM Address
	TAY
	LDA TEMP3E_LO
	STA BUFFER_LO,X
	LDA TEMP3E_HI
	STA BUFFER_HI,X
; Store Buffer Length
	LDA TEMP66
	STA BUFFER_LENGTH,X
; Update VRAM Address
	LDA TEMP3E_LO
	CLC
	ADC #$20
	STA TEMP3E_LO
	LDA TEMP3E_HI
	ADC #$00
	STA TEMP3E_HI
;
	TYA
	TAX
; Store Buffer End
	LDA #$00
	STA BUFFER,Y
	DEC TEMP65
	BNE @Loop4
@Loop5:
; Set to Ready
	LSR $2B
@read_buffer:
	LDA #$01
	JSR switch_thread
	BIT BUFFER_SIZE
	BVC @read_buffer
	LDX #$00
	LDY #$00
@Loop7:
; Check for End of Buffer
	LDA BUFFER,X
	BEQ @Loop9
; Store Buffer Length
	STA TEMP67
	STA (TEMP40),Y
	INY
	INX
	INX
	INX
@Loop8:
; Store Buffer Data
	LDA BUFFER,X
	STA (TEMP40),Y
	INX
	INY
; Check for end
	DEC TEMP67
	BNE @Loop8
; Store Next Line
	LDA #$A1
	STA (TEMP40),Y
	INY
	JMP @Loop7
@Loop9:
	TYA
	CLC
	ADC TEMP40_LO
	STA TEMP40_LO
	LDA TEMP40_HI
	ADC #$00
	STA TEMP40_HI
	LDA TEMP65
	BNE @ready
; Store End
	LDA #$FF
	LDY #$00
	STA (TEMP40),Y
	STY BUFFER_SIZE
	JMP vram_transfer_finished

L_D38E:
	STY $40
	STX $41
	LDA $45
	LDX $44
	JSR L_D47C
	STA $42
	LDY $40
	LDX $41
	LDA #$02
	JSR buffer_add
	JSR L_D4B7
	JSR buffer_end
	LDA $40
	CLC
	ADC #$03
	STA $40
	LDA $41
	ADC #$00
	STA $41
	JMP L_D44A

L_D3BA:
	LDA #$0A
L_D3BC:
	JSR buffer_add
	STX $41
	LDA $45
	LDX $44
	JSR L_D47C
	STA $40
	LDX $41
	LDA $0337,X
	LDY #$01
	JMP L_D3F2
L_D3D4:
	LDA #$0B
	JSR buffer_add
	STX $41
	LDA $45
	LDX $44
	JSR L_D47C
	STA $40
	LDX $41
	JSR L_D4B7
	LDA #$3B
	STA $033A,X
	INX
	INY
	LDA #$08
L_D3F2:
	STA $41
@Loop1:
	LDA ($3E),Y
	CMP #$41
	BCC @Loop2
	CMP #$5B
	BCS @Loop2
	STA $033A,X
	INX
	DEC $41
	BEQ @Loop4
@Loop2:
	INY
	DEC $40
	BNE @Loop1
	LDA #$00
@Loop3:
	STA $033A,X
	INX
	DEC $41
	BNE @Loop3
@Loop4:
	JSR buffer_end
	LDX $43
	JMP bank_swap_8000

L_D41D:
	STY $40
	STX $41
	LDA $45
	LDX $44
	JSR L_D47C
	STA $42
	LDA #$0F
	SEC
	SBC $42
	CLC
	ADC $40
	STA $40
	LDA $41
	ADC #$00
	STA $41
	JMP L_D44A
L_D43D:
	STY $40
	STX $41
	LDA $45
	LDX $44
	JSR L_D47C
	STA $42
L_D44A:
	JSR L_D53E
	JSR L_D4D4
	LDY $40
	LDX $41
	BIT $64
	BVS @Loop1
	LDA #<$037F
	STA $3E
	LDA #>$037F
	STA $3F
	JSR vram_buffer_controls
	JMP @Loop2
@Loop1:
	LDA #$80
	STA $3E
	LDA #$03
	STA $3F
	LDA $037F
	JSR buffer_large_text
@Loop2:
	JSR L_D553
	LDX $43
	JMP bank_swap_8000

L_D47C:
; Store Team and Player
	STA TEMP3F
	STX TEMP3E
; Store 8000 Bank and Swap
	LDA BANK_8000
	STA TEMP43
	LDX #$00 ; BANK1
	JSR bank_swap_8000
	LDX #$01 ; BANK2
	JSR bank_swap_A000
; Get Team Address
	LDX TEMP3E
	LDA TEMP3F
	ASL
	TAY
	LDA PLAYER_NAME_LIST+0,Y
	STA TEMP3E_LO
	LDA PLAYER_NAME_LIST+1,Y
	STA TEMP3E_HI
; Get Player Address and Length
	TXA
	ASL
	TAY
	LDA (TEMP3E),Y
	TAX
	INY
	LDA (TEMP3E),Y
	PHA
	INY
	LDA (TEMP3E),Y
	STX TEMP3E_LO
	SEC
	SBC TEMP3E_LO
	TAY
	PLA
	STA TEMP3E_HI
	DEY
	TYA
	RTS

L_D4B7:
	LDY #$00
	LDA ($3E),Y
	LSR
	LSR
	LSR
	LSR
	BEQ @Loop1
	CLC
	ADC #$30
@Loop1:
	STA $033A,X
	INX
	LDA ($3E),Y
	AND #$0F
	CLC
	ADC #$30
	STA $033A,X
	INX
	RTS

L_D4D4:
	LDX #$00
	LDY #$01
	STX $037F
@Loop1:
	LDA (TEMP3E),Y
; Check for Space
	CMP #$20
	BEQ @Loop4
; Check for Period
	CMP #$2E
	BEQ @Loop3
; Check for small letter
	CMP #$61
	BCS @Loop2
; Check for end of first name
	BIT $037F
	BMI @Loop2
; Store Space Between First and Last Name
	LDA #$20
	STA $0380,X
	INX
; Set end of first name
	LDA #$FF
	STA $037F
@Loop2:
; Change to Capital letter
	LDA (TEMP3E),Y
	AND #$DF
	JMP @Loop4
@Loop3:
	LDA #$FF
	STA $037F
	LDA (TEMP3E),Y
@Loop4:
	STA $0380,X
	INY
	INX
; Check for End
	DEC TEMP42
	BNE @Loop1
; Store End of Name
	LDA #$FF
	STA $0380,X
; Store Name Length
	STX $037F
	RTS

L_D519:
	JSR L_D47C
; Store Player Name Length
	STA TEMP42
; Store Player Number
	LDY #$00
	LDA (TEMP3E),Y
	STA TEMP45
;
	JSR L_D53E
; Store Player Name
	JSR L_D4D4
; Return to 8000 Bank
	LDX TEMP43
	JMP bank_swap_8000

L_D52F:
	JSR L_D47C
	LDY #$00
	LDA ($3E),Y
	TAY
	LDX $43
	JSR bank_swap_8000
	TYA
	RTS

L_D53E:
	LDA $037E
	BPL @Loop1
	LDA #$01
	JSR switch_thread
	JMP L_D53E
@Loop1:
	ORA #$80
	ORA $00
	STA $037E
	RTS

L_D553:
	LDA #$00
	STA $037E
	RTS

set_vertical_mirroring:
	LDA #$00
	STA MIRRORING
	LDA $2D
	AND #%10111111
	STA $2D
	RTS

set_horizontal_mirroring:
	LDA #$01
	STA MIRRORING
	LDA $2D
	ORA #%01000000
	STA $2D
	RTS

clear_sprites:
; Clear Page #2 For Sprites
	LDX #$00
	LDA #$F0
:	STA SPRITE,X
	INX
	INX
	INX
	INX
	BNE :-
	RTS

L_D57F:
	STA TEMP40
	JSR buffer_add
; Set Length
	LDA TEMP40
	AND #$3F
	STA TEMP40
; Write Data to Buffer
	LDY #$00
@more:
	LDA (TEMP3E),Y
	CMP #$20
	BNE @buffer
; Set as clear tile
	LDA #$00
@buffer:
	STA BUFFER,X
	INY
	INX
	DEC TEMP40
	BNE @more
	JMP buffer_end

L_D5A0:
	STA $45
	LDA #$02
	JSR buffer_add
	CLC
	LDA $45
	JSR L_D5F8
	LDA $45
	JSR L_D605
	JMP buffer_end

L_D5B5:
	STA $45
	LDA #$02
	JSR buffer_add
	LDA $45
	AND #$F0
	BEQ @Loop1
	JSR L_D5F8
	LDA $45
	JSR L_D605
	JMP buffer_end
@Loop1:
	LDA $45
	JSR L_D605
	LDA #$00
	STA $033A,X
	INX
	JMP buffer_end

L_D5DB:
	LDA #$04
	JSR buffer_add
	CLC
	LDA $45
	JSR L_D5F8
	LDA $45
	JSR L_D5FE
	LDA $44
	JSR L_D5F8
	LDA $44
	JSR L_D605
	JMP buffer_end

L_D5F8:
	PHP
	LSR
	LSR
	LSR
	LSR
	PLP
L_D5FE:
	AND #$0F
	BEQ L_D603
	SEC
L_D603:
	BCC L_D609
L_D605:
	AND #$0F
	ORA #$30
L_D609:
	STA $033A,X
	INX
	RTS

clear_ram_size:
	STY TEMP44_HI
	INX
	LDY #$00
@more:
	PHA
	LDA #$00
	STA (TEMP44),Y
	INC TEMP44_LO
	BNE @end
	INC TEMP44_HI
@end:
	PLA
	SEC
	SBC #$01
	BNE @more
	DEX
	BNE @more
	RTS

L_D628:
	TYA
	SEC
	SBC $54
	TAY
	TXA
	SBC $55
	BMI @Loop4
	BNE @Loop1
	TYA
	SEC
	SBC $7D
	BCC @Loop3
	TYA
	SEC
	SBC $7E
	BCC @Loop6
	CMP #$04
	BCC @Loop2
@Loop1:
	LDA #$04
@Loop2:
	TAX
	LDA $54
	CMP #<P2_SCREEN_SCROLL_BACK
	LDA $55
	SBC #>P2_SCREEN_SCROLL_BACK
	BCS @Loop6
	TXA
	STA $59
	CLC
	ADC $54
	STA $54
	LDA $55
	ADC #$00
	STA $55
	RTS
@Loop3:
	CMP #$FC
	BCS @Loop5
@Loop4:
	LDA #$FC
@Loop5:
	TAX
	LDA $54
	CMP #<P1_SCREEN_SCROLL_BACK
	LDA $55
	SBC #>P1_SCREEN_SCROLL_BACK
	BCC @Loop6
	TXA
	STA $59
	CLC
	ADC $54
	STA $54
	LDA $55
	SBC #$00
	STA $55
@Loop6:
	RTS

wait_interrupt:
	LDA FRAME_COUNT
:	CMP FRAME_COUNT
	BEQ :-
	DEX
	BNE wait_interrupt
	RTS

set_ymenu_arrow:
	STY MENU_LO
	STX MENU_HI
	STA MENU_JOYPAD
L_D690:
; Store Arrow Tile #, Attributes, X Position
	LDY #$02
@next:
	LDA (MENU),Y
	STA $0201,Y
	DEY
	BPL @next
; Update Menu Address to Y Positions
	LDA MENU_LO
	CLC
	ADC #$03
	STA MENU_LO
	LDA MENU_HI
	ADC #$00
	STA MENU_HI
; Store Arrow Y Position
	LDY Y_MENU_OPTION
	INY
	LDA (MENU),Y
	STA $0200
; Store Arrow Wait
	LDA #$00
	STA MENU_WAIT
	RTS

ymenu_up_down:
; Check for Up or Down
	LDY MENU_JOYPAD
	LDA JOYPAD1_RAW,Y
	AND #%00001100
	BEQ @no_move
; Check for Wait
	LDY MENU_WAIT
	BNE @wait
	LDY #$14
	STY MENU_WAIT
	JMP @move
@wait:
	DEC MENU_WAIT
	BNE @no_set
	LDY #$08
	STY MENU_WAIT
@move:
; Up or Down?
	AND #%00001000
	BEQ @down
; Move Up
@up:
	DEC Y_MENU_OPTION
	BPL @set_up
	LDY #$00
	LDA (MENU),Y
	SEC
	SBC #$01
	STA Y_MENU_OPTION
@set_up:
	SEC
	RTS
; Move Down
@down:
	INC Y_MENU_OPTION
	LDA Y_MENU_OPTION
	LDY #$00
	CMP (MENU),Y
	BCC @set_down
	LDA #$00
	STA Y_MENU_OPTION
@set_down:
	SEC
	RTS
; Not Up or Down
@no_move:
	LDA #$00
	STA MENU_WAIT
@no_set:
	CLC
	RTS

ymenu_set_y:
	LDY Y_MENU_OPTION
	INY
	LDA (MENU),Y
	STA $0200
	RTS

set_xymenu_arrow:
	STY MENU_LO
	STX MENU_HI
	STA MENU_JOYPAD
; Store Arrow Tile #
	LDY #$00
	LDA (MENU),Y
	STA $0201
; Store Arrow Attributes
	INY
	LDA (MENU),Y
	STA $0202
; Store Arrow Wait
	LDA #$00
	STA MENU_WAIT
	JMP xymenu_set_xy

xymenu_move:
; Check for Up, Down, Left, Right
	LDX MENU_JOYPAD
	LDA JOYPAD1_RAW,X
	AND #%00001111
	BEQ @no_move
	LDA MENU_WAIT
	BNE @wait
	LDA #$14
	STA MENU_WAIT
	JMP @move
@wait:
	DEC MENU_WAIT
	BNE @no_set
	LDA #$08
	STA MENU_WAIT
@move:
; Up, Down, Left, or Right?
	LDX MENU_JOYPAD
	LDA JOYPAD1_RAW,X
	LDX #$01
	LDY #$03
	LSR
	BCS @down_right
	LSR
	BCS @up_left
	DEX
	DEY
	LSR
	BCS @down_right
; Move Up or Left
@up_left:
	DEC Y_MENU_OPTION,X
; Check for Top / Left Side
	BPL @set
	LDA (MENU),Y
	SEC
	SBC #$01
	STA Y_MENU_OPTION,X
	JMP @set
; Move Down or Right
@down_right:
	INC Y_MENU_OPTION,X
; Check for Bottom / Right Side
	LDA Y_MENU_OPTION,X
	CMP (MENU),Y
	BCC @set
	LDA #$00
	STA Y_MENU_OPTION,X
@set:
; Get XY Option
	JSR xymenu_get_spot
	ASL
	CLC
	ADC #$04
; Check for Unavailable Option
	TAY
	LDA (MENU),Y
	CMP #$FF
	BEQ @move
	SEC
	RTS
@no_move:
	LDA #$00
	STA MENU_WAIT
@no_set:
	CLC
	RTS

xymenu_set_xy:
; Get XY Option
	JSR xymenu_get_spot
	ASL
	CLC
	ADC #$04
; Store Arrow Y Position
	TAY
	LDA (MENU),Y
	STA $0200
; Store Arrow X Position
	INY
	LDA (MENU),Y
	STA $0203
	RTS

xymenu_get_spot:
; A = Y * Width + X
	LDY #$03
	LDA #$00
	LDX Y_MENU_OPTION
	BEQ @x
@y:
	CLC
	ADC (MENU),Y
	DEX
	BNE @y
@x:
	CLC
	ADC X_MENU_OPTION
	RTS

L_D7A0:
	STA $45
	LDA #$00
	STA $44
	LDY #$08
@Loop1:
	ASL $44
	ROL $45
	BCC @Loop2
	TXA
	CLC
	ADC $44
	STA $44
	LDA $45
	ADC #$00
	STA $45
@Loop2:
	DEY
	BNE @Loop1
	RTS

L_D7BE:
	STY $44
	STX $45
	LDX #$00
	STX $43
	TAX
	LDY #$10
@Loop1:
	ASL $43
	ROL $44
	ROL $45
	BCC @Loop2
	TXA
	CLC
	ADC $43
	STA $43
	LDA $44
	ADC #$00
	STA $44
	LDA $45
	ADC #$00
	STA $45
@Loop2:
	DEY
	BNE @Loop1
	RTS

L_D7E7:
	LDA $42
	LDX $43
	LDY #$00
	STY $42
	STY $43
	LDY #$10
@Loop1:
	ASL $42
	ROL $43
	ROL $44
	ROL $45
	BCC @Loop2
	PHA
	CLC
	ADC $42
	STA $42
	TXA
	ADC $43
	STA $43
	LDA #$00
	ADC $44
	STA $44
	LDA #$00
	ADC $45
	STA $45
	PLA
@Loop2:
	DEY
	BNE @Loop1
	RTS

divide_8:
; $45 / $44 = Quotient $45 Remainder $42
	LDA #$00
	STA TEMP42
	LDX #$08
@div:
	ASL TEMP45
	ROL TEMP42
	LDA TEMP42
	SEC
	SBC TEMP44
	BCC @next
	STA TEMP42
	INC TEMP45
@next:
	DEX
	BNE @div
	RTS

L_D832:
	LDA #$00
	STA $40
	STA $41
	LDX #$10
	ASL $44
	ROL $45
@Loop1:
	ROL $40
	ROL $41
	LDA $40
	SEC
	SBC $42
	TAY
	LDA $41
	SBC $43
	BCC @Loop2
	STA $41
	STY $40
@Loop2:
	ROL $44
	ROL $45
	DEX
	BNE @Loop1
	RTS

L_D85A:
	LDA #$00
	STA $43
L_D85E:
	LDA #$00
	STA $3E
	STA $3F
	LDX #$18
	ASL $43
	ROL $44
	ROL $45
@Loop1:
	ROL $3E
	ROL $3F
	LDA $3E
	SEC
	SBC $40
	TAY
	LDA $3F
	SBC $41
	BCC @Loop2
	STA $3F
	STY $3E
@Loop2:
	ROL $43
	ROL $44
	ROL $45
	DEX
	BNE @Loop1
	RTS

L_D88A:
	LDA #$0A
	STA $42
	LDA #$00
	STA $43
	LDA #$03
	STA $3E
@Loop1:
	JSR L_D832
	LDA $40
	STA $3F
	JSR L_D832
	LDA $40
	ASL
	ASL
	ASL
	ASL
	ORA $3F
	PHA
	DEC $3E
	BNE @Loop1
	PLA
	STA $42
	PLA
	STA $41
	PLA
	STA $40
	RTS

L_D8B7:
	STA $45
	LDA #$0A
	STA $44
	JSR divide_8
	LDA $42
	STA $43
	JSR divide_8
	LDA $42
	ASL
	ASL
	ASL
	ASL
	ORA $43
	STA $43
	JSR divide_8
	LDA $42
	STA $45
	LDA $43
	STA $44
	RTS

bank_swap_8000:
	STX BANK_8000
	LDA #$06
	BNE @swap
bank_swap_A000:
	STX BANK_A000
	LDA #$07
@swap:
  ORA MODE_8000
	STA SOFT_8000
	SEC
	ROR $2C
	STA BANK_SELECT
	STX BANK_DATA
	LSR $2C
	RTS

L_D8F7:
	JSR update_randoms
	LDA RANDOM_3B
	AND #%00000011
	BEQ @Loop3
	CMP #%00000001
	BEQ @Loop2
	CMP #%00000010
	BEQ @Loop1
@Loop0:
	LDA RANDOM_3D
	RTS
@Loop1:
	LDA RANDOM_3C
	RTS
@Loop2:
	LDA RANDOM_3D
	CLC
	ADC RANDOM_3C
	RTS
@Loop3:
	LDA RANDOM_3D
	CLC
	ADC RANDOM_3C
	ADC RANDOM_3B
	RTS

L_D91C:
	STA $44
	JSR L_D8F7
	STA $45
	JSR divide_8
	LDA $42
	RTS

update_random_3B:
	LDA RANDOM_3B
	CLC
	ADC #$83
	STA RANDOM_3B
	RTS

update_random_3C:
	LDA RANDOM_3C
	CLC
	ADC #$0D
	STA RANDOM_3C
	RTS

update_random_3D:
	LDA RANDOM_3D
	CLC
	ADC #$11
	STA RANDOM_3D
	RTS

PALETTE_FADE: 
	.BYTE $0F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	.BYTE $0F, $00, $00, $00, $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $10, $10
	.BYTE $0F, $00, $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $20, $20, $20, $20
	.BYTE $0F, $00, $00, $00, $10, $10, $10, $10, $20, $20, $20, $20, $30, $30, $30, $30

LARGE_TEXT:
; Upper Half of Large Text
	.BYTE $00, $00
	.BYTE $85, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $90, $91 ; 0
	.BYTE $AE, $A8 ; 1
	.BYTE $9C, $CD ; 2
	.BYTE $9C, $CD ; 3
	.BYTE $B0, $B1 ; 4
	.BYTE $C0, $AC ; 5
	.BYTE $D0, $9D ; 6
	.BYTE $D4, $D5 ; 7
	.BYTE $CC, $CD ; 8
	.BYTE $CC, $D1 ; 9
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $90, $91 ; A
	.BYTE $C0, $CD ; B
	.BYTE $90, $A5 ; C
	.BYTE $94, $91 ; D
	.BYTE $C0, $C1 ; E
	.BYTE $C0, $C1 ; F
	.BYTE $90, $A5 ; G
	.BYTE $C8, $C9 ; H
	.BYTE $C4, $C5 ; I
	.BYTE $00, $89 ; J
	.BYTE $C8, $A1 ; K
	.BYTE $84, $00 ; L
	.BYTE $8C, $8D ; M
	.BYTE $8C, $99 ; N
	.BYTE $90, $91 ; O
	.BYTE $94, $A9 ; P
	.BYTE $90, $91 ; Q
	.BYTE $94, $A9 ; R
	.BYTE $CC, $9D ; S
	.BYTE $D8, $D9 ; T
	.BYTE $84, $85 ; U
	.BYTE $DC, $DD ; V
	.BYTE $98, $99 ; W
	.BYTE $A0, $A1 ; X
	.BYTE $A0, $A1 ; Y
	.BYTE $D4, $D5 ; Z
; Lower Half of Large Text
	.BYTE $00, $00
	.BYTE $A6, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $B4, $B5
	.BYTE $81, $00
	.BYTE $00, $00
	.BYTE $92, $93 ; 0
	.BYTE $C6, $C7 ; 1
	.BYTE $82, $83 ; 2
	.BYTE $9E, $CF ; 3
	.BYTE $B2, $B3 ; 4
	.BYTE $9F, $CF ; 5
	.BYTE $D2, $CF ; 6
	.BYTE $DA, $DB ; 7
	.BYTE $CE, $CF ; 8
	.BYTE $9E, $D3 ; 9
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $00, $00
	.BYTE $86, $87 ; A
	.BYTE $C2, $CF ; B
	.BYTE $92, $A7 ; C
	.BYTE $96, $93 ; D
	.BYTE $C2, $C3 ; E
	.BYTE $CA, $A4 ; F
	.BYTE $92, $95 ; G
	.BYTE $CA, $CB ; H
	.BYTE $C6, $C7 ; I
	.BYTE $8A, $8B ; J
	.BYTE $CA, $A3 ; K
	.BYTE $96, $AA ; L
	.BYTE $8E, $8F ; M
	.BYTE $8E, $9B ; N
	.BYTE $92, $93 ; O
	.BYTE $86, $AB ; P
	.BYTE $92, $AD ; Q
	.BYTE $86, $88 ; R
	.BYTE $9E, $CF ; S
	.BYTE $DA, $DB ; T
	.BYTE $92, $93 ; U
	.BYTE $DE, $DF ; V
	.BYTE $9A, $9B ; W
	.BYTE $A2, $A3 ; X
	.BYTE $DA, $DB ; Y
	.BYTE $D6, $D7 ; Z

L_DA6D:
	LDX #$39
	TXS
	LDX #$1A ; BANK27
	JSR bank_swap_8000
	JSR L_27_8012
	LDX #$14 ; BANK21
	JSR bank_swap_8000
L_DA7D:
	LDA #$01
	JSR switch_thread
	LDA #$9F
	STA $AE
	LDA #$03
	STA $AF
	LDA #$16
	STA $B0
L_DA8E:
	LDY #$0C
	LDA ($AE),Y
	STA $B8
	INY
	LDA ($AE),Y
	STA $B9
	LDY #$02
	LDA ($AE),Y
	BEQ L_DAB2
	SEC
	SBC #$01
	STA ($AE),Y
	BNE L_DAB2
	STY $B1
	LDY #$04
	LDA ($AE),Y
	PHA
	DEY
	LDA ($AE),Y
	PHA
	RTS
L_DAB2:
	LDY #$05
	LDA ($AE),Y
	BEQ L_DADB
	SEC
	SBC #$01
	STA ($AE),Y
	BNE L_DADB
	STY $B1
	LDY #$07
	LDA ($AE),Y
	PHA
	DEY
	LDA ($AE),Y
	PHA
	RTS
L_DACB:
	LDY $B1
	STA ($AE),Y
	INY
	PLA
	STA ($AE),Y
	INY
	PLA
	STA ($AE),Y
	CPY #$04
	BEQ L_DAB2
L_DADB:
	LDY #$17
	LDA ($AE),Y
	STA $45
	LDY #$1A
	LDA ($AE),Y
	LDY #$16
	CLC
	ADC ($AE),Y
	STA ($AE),Y
	LDY #$1B
	LDA ($AE),Y
	BMI @Loop6
	ADC $45
	CMP #FIELD_BOTTOM
	BCS @Loop8
	JMP @Loop7
@Loop6:
	ADC $45
	CMP #FIELD_TOP
	BCC @Loop8
@Loop7:
	LDY #$17
	STA ($AE),Y
	STA $45
@Loop8:
	LDY #$18
	LDA ($AE),Y
	LDY #$13
	CLC
	ADC ($AE),Y
	STA ($AE),Y
	LDY #$19
	LDA ($AE),Y
	BMI @Loop9
	LDY #$14
	ADC ($AE),Y
	TAX
	LDA #$00
	INY
	ADC ($AE),Y
	CMP #>P1_ENDZONE_BACK_LOCATION
	BNE @Loop11
	CPX #<P1_ENDZONE_BACK_LOCATION
	BCC @Loop11
	JMP @Loop10
@Loop9:
	LDY #$14
	ADC ($AE),Y
	TAX
	LDA #$FF
	INY
	ADC ($AE),Y
	CMP #>P2_ENDZONE_BACK_LOCATION
	BNE @Loop11
	CPX #<P2_ENDZONE_BACK_LOCATION
	BCS @Loop11
@Loop10:
	LDY #$00
	LDA ($AE),Y
	ORA #$01
	STA ($AE),Y
	LDY #$14
	LDA ($AE),Y
	JMP @Loop12
@Loop11:
	STA ($AE),Y
	DEY
	TXA
	STA ($AE),Y
@Loop12:
	SEC
	SBC $54
	TAX
	INY
	LDA ($AE),Y
	SBC $55
	BNE @Loop13
	TXA
	LDX $B8
	STA $0207,X
	SEC
	SBC #$08
	BCC @Loop14
	STA $0203,X
	LDA $45
	STA $0200,X
	STA $0204,X
	JMP @Loop16
@Loop13:
	TAY
	TXA
	SEC
	SBC #$08
	TAX
	TYA
	SBC #$00
	BNE @Loop15
	TXA
	LDX $B8
	STA $0203,X
	LDA $45
	STA $0200,X
	LDA #$F0
	STA $0204,X
	JMP @Loop16
@Loop14:
	LDA $45
	STA $0204,X
	LDA #$F0
	STA $0200,X
	JMP @Loop16
@Loop15:
	LDX $B8
	LDA #$F0
	STA $0200,X
	STA $0204,X
@Loop16:
	LDX $B9
	BEQ @Loop17
	LDY #$01
	LDA ($AE),Y
	AND #$07
	ASL
	TAY
	LDA L_DF4F,Y
	PHA
	LDA L_DF4F+1,Y
	LDY $B8
	CLC
	ADC $0203,Y
	STA $0203,X
	PLA
	CLC
	ADC $0200,Y
	STA $0200,X
@Loop17:
	LDA $AE
	CLC
	ADC #$20
	STA $AE
	LDA $AF
	ADC #$00
	STA $AF
	DEC $B0
	BEQ @Loop18
	JMP L_DA8E
@Loop18:
	LDY #$00
	LDA ($84),Y
	AND #$08
	ORA #$10
	STA $45
	LDY #$17
	LDA ($84),Y
	SEC
	SBC $45
	STA $0200
	LDY #$14
	LDA ($84),Y
	SEC
	SBC #$04
	TAX
	INY
	LDA ($84),Y
	SBC #$00
	TAY
	TXA
	SEC
	SBC $54
	TAX
	TYA
	SBC $55
	BEQ @Loop20
	LDA #$33
	BCS @Loop19
	LDX #$08
	LDY #$40
	JMP @Loop21
@Loop19:
	LDX #$F0
	LDY #$00
	JMP @Loop21
@Loop20:
	LDA #$2D
	LDY #$00
@Loop21:
	STX $0203
	STA $0201
	STY $0202
	LDY #$00
	LDA ($86),Y
	AND #$08
	ORA #$10
	STA $45
	LDY #$17
	LDA ($86),Y
	SEC
	SBC $45
	STA $0204
	LDY #$14
	LDA ($86),Y
	SEC
	SBC #$04
	TAX
	INY
	LDA ($86),Y
	SBC #$00
	TAY
	TXA
	SEC
	SBC $54
	TAX
	TYA
	SBC $55
	BEQ @Loop23
	LDA #$33
	BCS @Loop22
	LDX #$08
	LDY #$42
	JMP @Loop24
@Loop22:
	LDX #$F0
	LDY #$02
	JMP @Loop24
@Loop23:
	LDA #$2F
	LDY #$02
@Loop24:
	STX $0207
	STA $0205
	STY $0206
	LDA $DF
	BEQ @Loop26
	DEC $DF
	BNE @Loop25
	LDA $70
	AND #$01
	TAX
	LDA $88,X
	ORA #$40
	STA $88,X
@Loop25:
	LDA $70
	AND #$02
	ASL
	TAX
	LDA #$F0
	STA $0200,X
@Loop26:
	LDA $8E
	BMI @Loop28
	LDA $71
	BMI @Loop28
	BIT $70
	BVS @Loop27
	LDY #$17
	LDA ($84),Y
	STA $90
	LDY #$15
	LDA ($84),Y
	STA $94
	TAX
	DEY
	LDA ($84),Y
	STA $93
	TAY
	JSR L_D628
	JMP @Loop28
@Loop27:
	LDY #$17
	LDA ($86),Y
	STA $90
	LDY #$15
	LDA ($86),Y
	STA $94
	TAX
	DEY
	LDA ($86),Y
	STA $93
	TAY
	JSR L_D628
@Loop28:
	LDA $8A
	CLC
	ADC $54
	STA $030C
	LDA #$00
	ADC $55
	AND #$01
	STA $030D
	LDA A:$54
	SEC
	SBC #$10
	STA $0311
	LDA A:$55
	SBC #$00
	AND #$01
	STA $0312
	LDA $71
	AND #$10
	BNE @Loop29
	LDA $0700
	BNE @Loop29
	LDA $0682
	STA $0700
@Loop29:
	LDA #$00
	STA $0682
	DEC $63
	BNE @Loop31
	LDA #$06
	STA $63
	INC $4B
	LDA $4B
	CMP #$06
	BCC @Loop30
	LDA #$00
@Loop30:
	STA $4B
@Loop31:
	LDA $30
	AND #$1F
	BNE @Loop32
	LDA $0313
	EOR #$02
	STA $0313
@Loop32:
	LDA $8B
	AND #$03
	BEQ @Loop34
	CMP #$01
	BEQ @Loop33
	JSR L_DD6C
	JMP @Loop35
@Loop33:
	JSR L_DD6C
	LDA L_DF73,X
	STA $030F
	JMP L_DA7D
@Loop34:
	LDA #$10
	STA $030E
@Loop35:
	LDA $30
	AND #$1F
	BNE @Loop36
	LDA $8B
	CLC
	ADC #$04
	STA $8B
	LSR
	LSR
	AND #$0F
	TAX
	LDA L_DF5F,X
	STA $030F
@Loop36:
	JMP L_DA7D

L_DD6C:
	LDA $30
	AND #$30
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA L_DF6F,X
	STA $030E
	RTS

L_DD7C:
	ASL
	BCC @Loop1
	ADC #$15
@Loop1:
	TAY
	LDA PLAYER_GAME_INFO,Y
	STA $3E
	LDA PLAYER_GAME_INFO+1,Y
	STA $3F
	RTS

L_DD8D:
	TAY
	EOR $70
	BPL @Loop1
	TYA
	CLC
	ADC #$0B
	TAY
@Loop1:
	TYA
L_DD98:
	ASL
	TAY
	BCS @Loop3
	LDX $6610,Y
	LDA $6611,Y
	RTS
@Loop3:
	LDX $6644,Y
	LDA $6645,Y
	RTS

L_DDAA:
	STY $45
	PHP
	TAY
	TXA
	ASL
	TAX
	LDA PLAYER_ABILITY_LENGTHS,Y
	CLC
	ADC TEAM_ABILITY_POINTERS,X
	STA $3E
	LDA #$00
	ADC TEAM_ABILITY_POINTERS+1,X
	STA $3F
	LDA $2F
	STA $44
	LDX #$01 ; BANK2
	JSR bank_swap_A000
	LDA $45
	BMI @Loop1
	PLP
	TAY
	LDA ($3E),Y
	JMP @Loop6
@Loop1:
	STY $45
	AND #$7F
	LSR
	TAY
	LDA ($3E),Y ; Loads Player Abilities
	BCS @Loop2
	LSR
	LSR
	LSR
	LSR
@Loop2:
	AND #$0F
	STA $3E
	LDA $45
	LSR
	LSR
	TAY
	PLP
	BCS @Loop3
	LDA $6503,Y
	JMP @Loop4
@Loop3:
	LDA $6608,Y
@Loop4:
	LDX $45
	JSR L_DE40
	CLC
	ADC $3E
	SEC
	SBC #$01
	BCS @Loop5
	LDA #$00
@Loop5:
	CMP #$10
	BCC @Loop6
	LDA #$0F
@Loop6:
	TAY
	LDX $44
	JSR bank_swap_A000
	TYA
	RTS

L_DE15:
	CMP #$0C
	BCC @Loop1
	CLC
	RTS
@Loop1:
	TAX
	LSR
	LSR
	TAY
	BIT $70
	BMI @Loop2
	LDA $6500,Y
	JMP L_DE40
@Loop2:
	LDA $6605,Y
	JMP L_DE40
L_DE2F:
	TAX
	LSR
	LSR
	TAY
	BIT $70
	BMI @Loop1
	LDA $6503,Y
	JMP L_DE40
@Loop1:
	LDA $6608,Y
L_DE40:
	TAY
	TXA
	EOR #$FF
	AND #$03
	BEQ @Loop2
	TAX
	TYA
@Loop1:
	LSR
	LSR
	DEX
	BNE @Loop1
	TAY
@Loop2:
	TYA
	AND #$03
	CMP #$01
	RTS

L_DE56:
	STA $44
	STX $45
	LDY #$FC
	STY $43
	EOR #$FF
	AND #$03
	BEQ @Loop2
	TAX
@Loop1:
	ASL $45
	ASL $45
	SEC
	ROL $43
	ROL $43
	DEX
	BNE @Loop1
@Loop2:
	JSR L_DEC8
	LDA #$80
	STA PRG_RAM_PROTECT
	LDA $44
	LSR
	LSR
	CLC
	ADC #$FA
	TAY
	LDA ($3E),Y
	AND $43
	ORA $45
	STA ($3E),Y
	LDA #$C0
	STA PRG_RAM_PROTECT
	RTS

L_DE8F:
	LDY #$14
	LDA ($3E),Y
	SEC
	SBC $97
	STA $45
	INY
	LDA ($3E),Y
	SBC $98
	BMI @Loop1
	BEQ @Loop3
@Loop1:
	CMP #$FF
	BNE @Loop2
	LDA #$00
	SEC
	SBC $45
	STA $45
	JMP @Loop3
@Loop2:
	LDA #$FF
	STA $45
@Loop3:
	LDY #$17
	LDA ($3E),Y
	SEC
	SBC $95
	BPL @Loop4
	EOR #$FF
	CLC
	ADC #$01
@Loop4:
	CMP $45
	BCS @Loop5
	LDA $45
@Loop5:
	RTS

L_DEC8:
	BIT $70
	BMI @Loop1
	LDA #$06
	STA $3E
	LDA #$64
	STA $3F
	RTS
@Loop1:
	LDA #$0B
	STA $3E
	LDA #$65
	STA $3F
	RTS

L_DEDE:
	ASL
	TAY
	LDA TEAM_SRAM_POINTERS,Y
	STA $3E
	LDA TEAM_SRAM_POINTERS+1,Y
	STA $3F
	RTS

PLAYER_GAME_INFO:
	.WORD $039F,$03BF,$03DF,$03FF,$041F,$043F,$045F,$047F,$049F,$04BF,$04DF
	.WORD $04FF,$051F,$053F,$055F,$057F,$059F,$05BF,$05DF,$05FF,$061F,$063F
TEAM_SRAM_POINTERS:
	.WORD $67AE,$687E,$694E,$6A1E,$6AEE,$6BBE,$6C8E,$6D5E,$6E2E,$7002,$70D2,$71A2,$7272,$7342
	.WORD $7412,$74E2,$75B2,$7682,$7752,$7822,$78F2,$79C2,$7A92,$7B62,$7C32,$7D02,$7DD2,$7EA2
L_DF4F:	.BYTE $F0, $00, $F0, $08, $00, $F8, $00, $10, $08, $10, $08, $F8, $F0, $04, $00, $00
L_DF5F:	.BYTE $30,$32,$34,$30,$3C,$3A,$30,$3E,$32,$34,$38,$36,$38,$36,$34,$32 ; cheerleader animation
L_DF6F:	.BYTE $10,$12,$14,$16 ; crowd animations
L_DF73:	.BYTE $2C,$2E,$2C,$2E
TEAM_ABILITY_POINTERS:
	.WORD BUFFALO_ABILITIES,INDIANAPOLIS_ABILITIES,MIAMI_ABILITIES,NEW_ENGLAND_ABILITIES,NEW_YORK_JETS_ABILITIES
	.WORD	CINCINNATI_ABILITIES,CLEVELAND_ABILITIES,HOUSTON_ABILITIES,PITTSBURGH_ABILITIES
	.WORD DENVER_ABILITIES,KANSAS_CITY_ABILITIES,LOS_ANGELES_RAIDERS_ABILITIES,SAN_DIEGO_ABILITIES,SEATTLE_ABILITIES
	.WORD WASHINGTON_ABILITIES,NEW_YORK_GIANTS_ABILITIES,PHILADELPHIA_ABILITIES,PHOENIX_ABILITIES,DALLAS_ABILITIES
	.WORD CHICAGO_ABILITIES,DETROIT_ABILITIES,GREEN_BAY_ABILITIES,MINNESOTA_ABILITIES,TAMPA_BAY_ABILITIES
	.WORD SAN_FRANCISCO_ABILITIES,LOS_ANGELES_RAMS_ABILITIES,NEW_ORLEANS_ABILITIES,ATLANTA_ABILITIES
PLAYER_ABILITY_LENGTHS:
	.BYTE $00,$05,$0A,$0E,$12,$16,$1A,$1E,$22,$26,$2A,$2E,$32,$35,$38,$3B,$3E,$41,$45,$49,$4D,$51,$55,$59,$5D,$61,$65,$69,$6D,$71,$75,$79
OFFENSIVE_MAX_SPEED_VALUES:
	.BYTE $15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F,$20,$21,$22,$23,$24
DEFENSIVE_MAX_SPEED_VALUES:
	.BYTE $25,$26,$27,$28,$29,$2A,$2B,$2C,$2D,$2E,$2F,$30,$31,$32,$33,$34
HITTING_POWER_VALUES:
	.BYTE $00,$04,$08,$0C,$10,$14,$18,$1C,$20,$24,$28,$2C,$30,$34,$38,$3C
	.BYTE $FF

